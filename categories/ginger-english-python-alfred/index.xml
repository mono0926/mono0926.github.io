<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ginger English Python Alfred on mono-log</title>
    <link>http://mono0926.com/categories/ginger-english-python-alfred/</link>
    <description>Recent content in Ginger English Python Alfred on mono-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 03 Aug 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://mono0926.com/categories/ginger-english-python-alfred/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ginger APIをPythonで叩いてみた</title>
      <link>http://mono0926.com/blog/2013/08/03/2013-08-03-ginger/</link>
      <pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mono0926.com/blog/2013/08/03/2013-08-03-ginger/</guid>
      <description>

&lt;p&gt;そんな有名でも無いけど、Gingerという英文作成支援サービスがある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1304/24/news120.html&#34;&gt;もう前置詞に迷わない」──「ネイティブレベル」の英語が書ける英文チェッカー「Ginger」日本上陸&lt;/a&gt;という記事などで4月にニュースになって、この手のものが好きな僕は&lt;a href=&#34;https://chrome.google.com/webstore/detail/spell-and-grammar-checker/kdfieneakcjfaiglcfcgkidlkmlijjnh&#34;&gt;Chromeの拡張&lt;/a&gt;をすぐ導入してみたけど、不必要な時に指摘されたり、必要な時は使い勝手が悪いし、うーんと思ったり。&lt;/p&gt;

&lt;h3 id=&#34;ginger-api:e8db02c391b5d454a2a2df2488b5a9be&#34;&gt;Ginger API&lt;/h3&gt;

&lt;p&gt;コマンドラインとかで使いたいなあと思って適当にぐぐったら、&lt;a href=&#34;http://blog.livedoor.jp/xaicron/archives/54466736.html&#34;&gt;Ginger API を試してみた&lt;/a&gt;という記事が。
Gistになぜか&lt;a href=&#34;https://gist.github.com/koron/5454500&#34;&gt;curlで使ってる例&lt;/a&gt;があるみたいで。&lt;/p&gt;

&lt;p&gt;GingerのページにはAPIとか無いのになぜだろうと思って、Chromeの開発ツールでリクエストのぞいてみたら、もろにAPI叩いているのがあった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mono0926.com/images/post/ginger.png&#34; alt=&#34;ginger&#34; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://services.gingersoftware.com/Ginger/correct/json/GingerTheText?callback=C&amp;amp;apiKey=6ae0c3a0-afdc-4532-a810-82ded0054236&amp;amp;lang=US&amp;amp;clientVersion=2.0&amp;amp;text=I+am+programmer.&amp;amp;_1375584239344=&#34;&gt;http://services.gingersoftware.com/Ginger/correct/json/GingerTheText?callback=C&amp;amp;apiKey=6ae0c3a0-afdc-4532-a810-82ded0054236&amp;amp;lang=US&amp;amp;clientVersion=2.0&amp;amp;text=I+am+programmer.&amp;amp;_1375584239344=&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;これをブラウザにコピペするとJSONが&lt;code&gt;C()&lt;/code&gt;で囲まれたものが出てくるけど、多分JSONP用のパラメーターなので、単にJSON受け取りたい場合は不要。&lt;/p&gt;

&lt;p&gt;textパラメーターも適当に削れて、以下でリクエストが可能。
apiKeyとかもろに出てるけどいいのだろうか(　´･‿･｀)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://services.gingersoftware.com/Ginger/correct/json/GingerTheText?apiKey=6ae0c3a0-afdc-4532-a810-82ded0054236&amp;amp;lang=US&amp;amp;clientVersion=2.0&amp;amp;text=I+am+programmer&#34;&gt;http://services.gingersoftware.com/Ginger/correct/json/GingerTheText?apiKey=6ae0c3a0-afdc-4532-a810-82ded0054236&amp;amp;lang=US&amp;amp;clientVersion=2.0&amp;amp;text=I+am+programmer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{&amp;ldquo;LightGingerTheTextResult&amp;rdquo;:[{&amp;ldquo;Confidence&amp;rdquo;:4,&amp;ldquo;From&amp;rdquo;:5,&amp;ldquo;LrnFrg&amp;rdquo;:&amp;ldquo;I am programmer&amp;rdquo;,&amp;ldquo;LrnFrgOrigIndxs&amp;rdquo;:[{&amp;ldquo;From&amp;rdquo;:5,&amp;ldquo;To&amp;rdquo;:14}],&amp;ldquo;Mistakes&amp;rdquo;:[{&amp;ldquo;CanAddToDict&amp;rdquo;:false,&amp;ldquo;From&amp;rdquo;:5,&amp;ldquo;To&amp;rdquo;:14}],&amp;ldquo;ShouldReplace&amp;rdquo;:true,&amp;ldquo;Suggestions&amp;rdquo;:[{&amp;ldquo;LrnCatId&amp;rdquo;:12,&amp;ldquo;Text&amp;rdquo;:&amp;ldquo;a programmer&amp;rdquo;},{&amp;ldquo;LrnCatId&amp;rdquo;:13,&amp;ldquo;Text&amp;rdquo;:&amp;ldquo;the programmer&amp;rdquo;}],&amp;ldquo;To&amp;rdquo;:14,&amp;ldquo;TopLrnCatId&amp;rdquo;:12,&amp;ldquo;Type&amp;rdquo;:3,&amp;ldquo;UXFrgFrom&amp;rdquo;:0,&amp;ldquo;UXFrgTo&amp;rdquo;:14}]}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ざっくりと、間違えている箇所と、その修正例(複数のこともあり)が返ってくる。&lt;/p&gt;

&lt;p&gt;と、普通にAPI叩けてしまい、これ使ってよいのだろうかと思いつつ、非公開になったりAPI変わったりすると面倒とか、くらいで私的に使う分には良いのではないかと。
これでサービス作ったり儲けたりすると黒くなってきそうだけど。&lt;/p&gt;

&lt;h3 id=&#34;実用的な英語のフレーズを表示する-rephrase-という機能:e8db02c391b5d454a2a2df2488b5a9be&#34;&gt;実用的な英語のフレーズを表示する「Rephrase」という機能&lt;/h3&gt;

&lt;p&gt;上記のやつは単に間違えをしてくれるサービスだけど、さらにより自然な言い回し候補を表示してくれるサービスもあったり。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gigazine.net/news/20130802-ginger-rephrase/&#34;&gt;英文を文脈に合わせて修正する「Ginger」とネイティブ英語に変換する「Rephrase」&lt;/a&gt;に書いてあるとおり&lt;a href=&#34;http://www.gingersoftware.com/rephrase_jpn&#34;&gt;Rephrase&lt;/a&gt;に飛ぶと使える。&lt;/p&gt;

&lt;p&gt;こちらも同様の手口で簡単にAPIのURLが取得可能。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://ro.gingersoftware.com/rephrase/rephrase?s=Hi%2C%20nice%20to%20meet%20you.&amp;amp;callback=jQuery17204343029616866261_1375585040822&amp;amp;_=1375585300259&#34;&gt;http://ro.gingersoftware.com/rephrase/rephrase?s=Hi%2C%20nice%20to%20meet%20you.&amp;amp;callback=jQuery17204343029616866261_1375585040822&amp;amp;_=1375585300259&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同じくcalllback云々は不要だけど、さっきはcallback関数名がCだったのにけっこうフォーマットが違ったり、apiKeyが無かったり、base URLが違ったりとかなり適当な感じ（´・ω・｀）&lt;/p&gt;

&lt;p&gt;と、英文を入力するとJSONで結果を受け取れるとこまでは行ったので、Pythonで叩いてみた。&lt;/p&gt;

&lt;p&gt;大体こんな感じで、修正後の英文や、改善後の候補群に変換するスクリプトが書けた。
最近はWebアクセスはrequestsモジュールを使うのがモダンっぽい。&lt;/p&gt;

&lt;p&gt;最新版：&lt;a href=&#34;https://github.com/mono0926/AlfredWorkflow/blob/master/ginger/ginger.py&#34;&gt;Alfred Workflow&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/local/bin/python
# -*- coding: utf-8 -*-
import requests
import json
import sys
import os

class GingerSummary(object):
	&amp;quot;&amp;quot;&amp;quot;Ginger Summary&amp;quot;&amp;quot;&amp;quot;
	def __init__(self, original, results):
		super(GingerSummary, self).__init__()
		self.original = original
		self.results = sorted(results, cmp=lambda x, y: cmp(x.from_, y.from_))
		self.gingered = None

	def process(self):
		if not self.gingered:
			self._ginger()
		return self.gingered;

	def show_detail(self):
		for r in self.results:
			print(r)

	def _ginger(self):
		gingered = self.original
		offset = 0
		for i, r in enumerate(self.results):
			suggest = r.suggestions[0]
			gingered = &#39;{0}{1}{2}&#39;.format(gingered[:r.from_+offset], suggest, gingered[r.to+1+offset:])
			offset += len(suggest) - (r.to - r.from_ + 1)
		self.gingered = gingered


class GingerResult(object):
	&amp;quot;&amp;quot;&amp;quot;Ginger Result&amp;quot;&amp;quot;&amp;quot;
	def __init__(self):
		super(GingerResult, self).__init__()

	@classmethod
	def create_from_json(cls, json):
		that = GingerResult()
		that.from_ = json[&#39;From&#39;]
		that.to = json[&#39;To&#39;]
		that.suggestions = [x[&#39;Text&#39;] for x in json[&#39;Suggestions&#39;]]
		that.should_replace = bool(json[&#39;ShouldReplace&#39;])
		that.confidence = json[&#39;Confidence&#39;]
		return that

	def __str__(self):
		return &#39;from: {0}, to: {1}, suggestions: [{2}], should_replace: {3}, confidence: {4}&#39;.format(
			self.from_, self.to, &#39;, &#39;.join(self.suggestions), self.should_replace, self.confidence)

class GingerClient(object):
	&amp;quot;&amp;quot;&amp;quot;Ginger Client&amp;quot;&amp;quot;&amp;quot;
	base_url = &#39;http://services.gingersoftware.com/Ginger/correct/json/GingerTheText&#39;
	api_key = &#39;6ae0c3a0-afdc-4532-a810-82ded0054236&#39;
	def __init__(self, sentence):
		super(GingerClient, self).__init__()
		self.sentence = sentence
	
	def ginger(self):
		self._initialize()
		return self.summary.process()

	def show_detail(self):
		self._initialize()
		self.summary.show_detail()

	def _initialize(self):
		params = {&#39;apiKey&#39;:GingerClient.api_key, &#39;text&#39;:self.sentence, &#39;lang&#39;:&#39;US&#39;, &#39;clientVersion&#39;:&#39;2.0&#39;}
		response = requests.get(GingerClient.base_url, params=params)
		results = json.loads(response.text)[&#39;LightGingerTheTextResult&#39;]
		ginger_results = [GingerResult.create_from_json(x) for x in results]
		self.summary = GingerSummary(self.sentence, ginger_results)	

class RephraseClient(object):
	&amp;quot;&amp;quot;&amp;quot;RephraseClient&amp;quot;&amp;quot;&amp;quot;
	base_url = &#39;http://ro.gingersoftware.com/rephrase/rephrase&#39;
	def __init__(self, sentence):
		super(RephraseClient, self).__init__()
		self.sentence = sentence

	def rephrase(self):
		response = requests.get(RephraseClient.base_url, params={&#39;s&#39;: self.sentence})
		results = json.loads(response.text)[&#39;Sentences&#39;]
		texts = [x[&#39;Sentence&#39;] for x in results]
		return texts


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;続き-gingerをalfredで使えるようにしてみた-blog-2013-08-04-ginger:e8db02c391b5d454a2a2df2488b5a9be&#34;&gt;続き：&lt;a href=&#34;http://mono0926.com/blog/2013/08/04/ginger/&#34;&gt;GingerをAlfredで使えるようにしてみた&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>