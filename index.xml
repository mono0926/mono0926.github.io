<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mono0926.com</title>
    <link>https://mono0926.com/</link>
    <description>Recent content on mono0926.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 18 Jul 2019 13:25:44 +0900</lastBuildDate>
    
	<atom:link href="https://mono0926.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>仕事依頼の相談</title>
      <link>https://mono0926.com/page/job/</link>
      <pubDate>Thu, 18 Jul 2019 13:25:44 +0900</pubDate>
      
      <guid>https://mono0926.com/page/job/</guid>
      <description>プロフィール 🐶 mono  - mono0926.com およびそのリンク先などご覧ください。
得意技術は次の通りです(2019年7月更新)。
 Swiftを用いたiOSアプリ開発  iOSアプリ開発業務経験: 7年 Swift歴: 5年  Firebase全般  GCP(Google Cloud Platform)もある程度  Flutterアプリ開発  1年くらいだが、最近はiOSネイティブより触れる時間が長くメインスキルになりつつある 執筆記事: Flutter 🇯🇵 – Medium Androidネイティブ知識が関わってくると多少厳しくなってくるがFlutterはAndroidで詰まることが稀なのであまり問題と感じていない( + 必要に応じてAndroidネイティブ開発もキャッチアップするイメージ)   できること  サービスの仕様検討・デザインからサーバーサイド・iOSネイティブアプリ(Flutter使えばAndroidも)までの一気通貫した開発  もちろん、デザインなどは専任には劣るが、開発的にコスパ良いデザインができるなど強みにもなり得る  サーバーサイドはFirebase(+GCP)以外もできなくはないが、新規開発なら大抵のケースでそれがもっとも効率よく高品質なものを作れると思って専念している その他、ソフトウェア開発の一通りのことを自分だけでこなせると思っていて、必要に応じて別の技術も活用中  ただ、Webフロント周りは技術的に俯瞰できるような知識は持っているつもりなものの、実際のプロダクション開発は現時点ではできるレベルではない   現在の状況 平日フルコミットで稼働中。
副業相談 以下でも募集していますが、直接メールでの相談や各種SNSアカウントからでの相談でもOKです。
 mono0926へ開発相談する - Stargzr _mono さんのジョブカード | Catcher（キャッチャー）  前提条件としては以下を想定しています。 余暇や現収入とのバランス・税金考慮などで、現在高めの単価を設定しています。
 単価は 20,000円/時 を希望  要相談で 12,000円/時 程度も検討 案件相談段階で、要した時間ベースで 6,000円/時  予めこちらから打診してその段階でNGなら打ち切りで、もちろんお金も請求いたしません   トータルで週あたり最大4時間程度を目安  今は本業以外はほぼ何も抱えていない状態  技術顧問の場合、例えば定額30万円で15時間以内の実稼働時間目安(あるいはこの半分くらい)などであれば、まず金銭的条件としては請けられる 仕事を請けられる時間帯は、基本的には休日メインで、場合によっては平日夜などの対応も可能 移動コストなど削減のため極力リモート対応を希望  メインの仕事もここ数年フルリモート   現状では割ける時間も限られているので、コーディング作業などよりも例えばFirebase・Flutterなどを実際に使う上でのノウハウの共有・アドバイスなどの方がバリューを提供しやすいと思っています。</description>
    </item>
    
    <item>
      <title>Live Photosを使ってみる</title>
      <link>https://mono0926.com/programming/live-photos/</link>
      <pubDate>Mon, 01 May 2017 10:13:29 +0900</pubDate>
      
      <guid>https://mono0926.com/programming/live-photos/</guid>
      <description>イッヌ🐶
 </description>
    </item>
    
    <item>
      <title>🐶 mono </title>
      <link>https://mono0926.com/page/about/</link>
      <pubDate>Mon, 01 Aug 2016 09:10:21 +0900</pubDate>
      
      <guid>https://mono0926.com/page/about/</guid>
      <description>ソフトウェアエンジニアで、今はメインはiOSアプリ開発(Swift)です。Firebaseも得意です。 mono系のIDと犬アイコンで活動してます(　´･‿･｀)
各種リンク 技術系記事  Medium Qiita  プロフィールなど  Stack Overflow プロフィール GitHub  レジュメ  Facebook Wantedlyプロフィール  開発したアプリ・サービス iGhost  iGhost - キャラチャット iActor - キャラになろう  日々の直接のユーザーサポート・会社の資金面など以外の、開発に関わることすべてを現在1人で担当しています。
 サーバーサイド(Firebase・GCP) iOSアプリ2本(Swift) デザイン(Sketch) データ分析(BigQuery・Data Studio) 要件定義  2018年2月のリリースから半年で、2アプリ合わせてApp Storeでのレビューは1,000件・平均評価4.65程度の高評価となっています。
JOIN US チーフエンジニアとして、iOS版アプリ + 開発全般やってます。 2015年10月にジョインして、iOS版アプリは全部書き直して11月にバージョン3.0としてリリースしました！ 最近は、統計・機械学習あたりにも手を出そうかと(　´･‿･｀)
Player! 2015年にAppStoreで、ベスト新着アプリ・iOS 9オススメアプリ・2015年ベストアプリに選ばれたアプリのiOS版を作り上げました。 メイン開発からは退きましたが、今でも週末にコミットしています。
Scene 世界100万ユーザーの写真整理・共有アプリのiOS版作っていました。 この頃までObjective-Cがっつり書いてましたが、それ以降はSwiftメインです。
その他 LINEクリエイターズスタンプ ラヴさんスタンプをLINEクリエイターズスタンプ受付初日に申請して、1,000個くらい売れました。
買っていただけると嬉しいです(　´･‿･｀) ギフト希望の場合はご連絡くださいヽ(・ω・｀）
モノサー テニスサークルぽいの作って、神奈川〜東京でテニスしてます。</description>
    </item>
    
    <item>
      <title>Apple Watchを手に入れたのでiPhone 6 Plusとの付き合い方を見直してみる</title>
      <link>https://mono0926.com/gadget/apple-watch-iphone-6plus/</link>
      <pubDate>Sun, 03 May 2015 22:30:05 +0900</pubDate>
      
      <guid>https://mono0926.com/gadget/apple-watch-iphone-6plus/</guid>
      <description>忌々しき2015/04/10 16時1分、予約戦線で失敗したため、Apple新製品4年ぶり2度目くらいに初日入手ならずな結果に終わってしまったApple Watchですが、一昨日ようやく手に入りました。 まだ3日目ですが、トップクラスに使い倒した自信ありますʕ ·ᴥ·ʔ
ちなみにモデルは、42mmスペースグレイアルミニウムケース・ブラックスポーツバンドと、結果的にダントツ一番人気となったやつです。
Apple Watchは諸々の理由でかなり気に入っていて(とは言え高すぎるとは思っている)、それらについて記事書きたいところですが、とりあえずiPhone 6 Plusとの付き合い方を見直したことに焦点を絞って書きたいと思います。
iPhone 6 Plusとのこれまでの付き合い方 iPhone 6 Plus、大きな画面で毎日かなり愛用しているのですが、やはりポケットの収まりの悪さがかなりネックでした。
ポケット小さい場合だと立っててもポケットからはみ出し気味だし、座ると太股などと干渉して机の上などに置かざるを得ないです。
ポケット大きい場合でも、自転車とかはすぽっと抜けそうだったり、走ったりすると吹っ飛びそうです。
このあたり、5sまでは全く問題無く、多分6でもギリギリOKでしょうが、残念ながら6 Plusはその閾値を超えてしまいました。
その分、画面の情報量の多さだったり、特にランドスケープにした時にPC用Webビューも問題なく見られるなど、機能的な魅力も1つ頭抜けていると思っています。
ちなみに、僕の取ったソリューションは「常に手に持つ」でした。
歩き移動中はもちろん、ランニング中も手に持つ運用で、かなり慣れてきたとはいえ何とかしたいなとずっと思っていました（´・ω・｀）
そんな中、Apple Watch併用によって、6 Plusを取り出す機会減って相性抜群、みたいな感想をよく目にするようになりました。
へー、と思いながらようやくApple Watchが届いて弄ったところ期待以上の使用感で、これは是非6 Plus運用含めてスマート化しなくては、と思うようになりました。
6 Plusの手持ち運用解消 苦悩の結果、手で常に持つ運用に至ってしまっていた理由は以下(　´･‿･｀)
 (A) 日常的に、ポケットに収まらない(特に座った時) (B) 主にランニング時、ポケットには入るものの、大きさ・重さなどのせいで吹っ飛びそうだし邪魔  それぞれ解決した感があります(　´･‿･｀)
(A) 日常的に、ポケットに収まらない(特に座った時) バッグはあまり持ちたく無い派(手ぶら派)なので、それ以外の方法で考えます。
そこで導入したのがこの2つ
  6 Plusが充分入ってケーブルとかちょっとしたものも追加で入るちょうど良いサイズ感です。 分厚くなく、かといってペラペラな感じでも無いのも良いです。
以前、7インチタブレット(Nexes 7)で同様の試みをしたことがあったのですが、その時は腰に7インチ端末をぶら下げることはやはり無理があることを悟って撤退しました。
ただ、今回iPhone 6 Plusおよびそれにジャストサイズなケースで試したら良い感じでした(　´･‿･｀) ブラブラしてもよいけど手軽に脱着したい場合はカラビナ、密着度あげたい場合はベルトに通すのが良いですね。
(B) 主にランニング時、ポケットには入るものの大きさ・重さなどのせいで吹っ飛びそう 「iPhone ランニング」などで調べると、アームバンドがよく検索に引っかかりますが、以前いくつか使ってみた感想としては微妙でした。
 ケースに入れるのや装着が面倒 取り出しがしにくい  Apple Watchがあるとはいえ、信号待ちなどでこみ入った操作したい時にぱっと取り出せると便利   さらに、iPhone 6 Plusは腕に付けるには大きすぎます(´・︵・｀)</description>
    </item>
    
    <item>
      <title>SourceTreeでブランチ名をコミットメッセージの先頭に自動挿入</title>
      <link>https://mono0926.com/programming/sourcetree/</link>
      <pubDate>Fri, 31 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/sourcetree/</guid>
      <description>Git便利ですね。今やこれ無しで開発は無理、というレベルです。
そんな日々使っているGitですが、何かしらのツールでタスクやIssueを作ってそのIDをfeatureブランチ名としている運用は多いと思います。
その場合、コミットメッセージにそのIDが含まれているとコミットとタスクを紐づけてくれるので、コミットメッセージの先頭にブランチ名を挿入することが多いはずです。
それを打つのが一々面倒だしたまにミスして違うタスクに紐付かれちゃうし、で少し困っていました。
コマンドラインで作業している場合は、以下のようなにGitのprepare-commit-msgフックを利用することで、コミットメッセージ作成時に自動挿入させることが可能です。
 Gitでcommitした時にブランチ名をcommitメッセージに自動でいれる - Qiita  ただ、SourceTreeで試そうとしたら、動いてくれず、調べたところ非対応のようです。
 SourceTree and git prepare-commit-msg - Atlassian Answers  @yabuchin_yさんに相談したら、commit-msgで書き換えてしまえばいけるのでは？ということで作ってもらえました。
(僕はこの時点で、commit-msgはバリデーションフェーズ的なもので、書き換えは不可能なのでは？と思って諦めてしまいそうでした。)
設定手順 コミットメッセージのテンプレートを作成して指定の文章が自動挿入されるようにする 以下を、特定のレポジトリルートで実行。
# $HOME/.gitmessage.txtの置き場所は自由です # グローバルな設定としたい場合は、--globalオプションを付ける git config commit.template $HOME/.gitmessage.txt  # .gitmessage.txtの中身(末尾に半角スペースを入れておくこと推奨) [branchname]  これで、コミットメッセージ作成時に、[branchname]が先頭に自動挿入されます。
コミット後に[branchname]がブランチ名へ書き換えられるようにする commit-msgフックを利用します。
以下を特定のレポジトリの.git/hooks/commit-msgとして配置します。
#!/usr/bin/env ruby message_file = ARGV[0] message = File.read(message_file, :encoding =&amp;gt; Encoding::UTF_8) current_branch = `git branch | grep &#39;*&#39;`.chomp.sub(&#39;* &#39;, &#39;&#39;) current_branch = current_branch[current_branch.rindex(&amp;quot;/&amp;quot;)+1 .. current_branch.length] newmessage = message.</description>
    </item>
    
    <item>
      <title>クックパッド第5回 開発コンテスト24に参戦した話</title>
      <link>https://mono0926.com/programming/cookpad/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/cookpad/</guid>
      <description>先日もISUCONコンテスト予選に出たばかりですが、土日(10月18-19日)に クックパッドの「第5回 開発コンテスト24」に参戦しました。
勝手にアニバーサリー ～なんでもない日を、あの人との記念日に。～が成果物です。 ちなみに、タイトルは僕が初め適当に提案したのが意外と良かったらしくそのまま採用されました（｀・ω・´）
メンバー こんな感じのバランスの良いメンバーが集まりました(　´･‿･｀)
 僕  iOSアプリか適当なGoコード書く予定 (結果Goコード書いてた)  やぶさん  サーバーサイド(普段Scala使ってるけど、今回はGo)  の奥さん  Data Veraciを作った方 (前職の先輩)  ひつじさん  yah○○のデザイナーさん  のんたん☆  恵比寿のデザイナーさん   僕が平均年齢くらいの華やかなメンバーでした。
当日まで  レポジトリ作成: SYM-CONTEST/Cookpad2014 Facebookイベント作成: クックパッド 第5回 開発コンテスト24 Slack用意  自宅警備もする必要があるので、オンライン上でやりとりして開発  yah○○のBASE6で打ち合わせ(ひつじさんからのご招待)  ここでのんたん☆の参戦決定（｀・ω・´）   当日 去年も余命チェッカーで参戦してたので、大体勝手は分かっていました。
朝9時 クックパッドの「第5回 開発コンテスト24」をリロードして、お題が「誰かと話すキッカケを作るサービス」であることを把握。
元々、10時までに作るネタが決まらなかったら解散というオレオレレギュレーションをやっていたので、時間を気にしつつネタ出し。
けっこう良いアイディアが出るものの、コンテスト受けしそうか微妙な感じで、なかなか収束せず。
雰囲気的に10時過ぎてもそのまま続行することにして、最低午前中にという感じで結果、過去に何かつながりがあってご無沙汰な人間関係を、勝手に記念日をでっちあげて祝うことで結びつけるサービスになりました。
具体的には、Twitterで過去に絡んだ人たちに、そのやり取りのキーワードを抽出して○○記念日のメッセージを投げるみたいな。 (Twitterに限らずもっと膨らませたかったけど、実装コストの兼ね合いもあり)
1日目昼 作るものが決まったので、もう少し仕様や画面を詰めるような相談をしたり、出来るところは実装始めたり。
やぶさん達はいつの間にかお寿司屋さん行ってました（´・д・｀） 僕は不慣れなGo言語での以下の2点の実装法を手短に調べて、うんいけそうみたいな感触を得ました。
 Twitter認証  mrjones/oauth採用  Twitter APIで過去のやり取りを取得  ChimeraCoder/anaconda採用   そんなこんなで、Googleハングアウト使いながら、みんなで色々お話しつつ作業。</description>
    </item>
    
    <item>
      <title>iOS 8/Swift エンジニア勉強会資料公開しました</title>
      <link>https://mono0926.com/programming/swift-lt/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/swift-lt/</guid>
      <description>iOS 8/Swift エンジニア勉強会が台風で延期になったので、手元にいつまでもあってもしょうもないので資料公開しました(　´･‿･｀)
  Xcode 6で利用可能になった ベクター画像リソースを 深掘り  from Masayuki Ono 
延期つらたん
↑LINEクリエイターズスタンプとして公開中です。</description>
    </item>
    
    <item>
      <title>ラヴ様LINEスタンプ6月売り上げ</title>
      <link>https://mono0926.com/line-stamp/stamp/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/line-stamp/stamp/</guid>
      <description>先月6月の4日昼から公開された愛犬ラヴ様のLINEスタンプですが、6月売り上げが確定しました。 http://bit.ly/love-stamp
収益10,000円を超えた段階で、振り込み対象になるようですが、おかげさまで12,716円と無事に超えることが出来ました。 買っていただいた方、ありがとうございます。
平均471円/日と、500円/日には届かないものの、淡々と売れ続けていて、嬉しいです。 若干売れ行きが落ち込み気味ですが、今月どうなりますかね（´-ω-｀）</description>
    </item>
    
    <item>
      <title>iOS8で1Passwordが使えるようになった</title>
      <link>https://mono0926.com/lifehack/password/</link>
      <pubDate>Fri, 13 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/lifehack/password/</guid>
      <description>OSX 10.10(Yosemite)やiOS 8にアップデートして困ったこと - monoHubで書いた通り、iOS 8にして以来、1Passwordが使えなくてつらたんでした（´-ω-｀）
しかし、ベータ版なら使えるという情報が。
4.5.3b1 (iOS) is now available, and resolves some of the issues with iOS 8.
&amp;mdash; 1Password Beta (@1PasswordBeta) June 4, 2014 
そこで、数日前にAgileBits Beta Newsletterに登録して待っていたら、今日メールが届きました。
それに従って、HockyApp ConfigのProfileをインストールした後、1Passwordのベータ版がインストール出来ました。
つらくない(　´･‿･｀)
http://bit.ly/love-stamp</description>
    </item>
    
    <item>
      <title>iTunesの動画や音楽の再生スピードを変える方法</title>
      <link>https://mono0926.com/programming/quicktime/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/quicktime/</guid>
      <description>iPhoneのPodcastアプリでは再生スピードをコントロール出来て便利なのに、iTunesではその機能が無いので、AppleScriptなど使って出来るようにしてみた。 本当はiTunesに閉じて実現したいところだけど、それはちょっと難しそう。
QuickTime Player 7のインストール 新しめのOSXに標準インストールされているQuickTimeはかっこいいけど機能がしょぼいので、再生スピードを変えるにはQuickTime Player 7をインストールする必要がある。
幸いまだQuickTime Player 7からダウンロード出来る。
 QuickTim 7 は、 Snow Leopard および OS X Lion 上で QTVR、対話型の QuickTime ムービー、MIDI などの古いメディアフォーマットをサポートしています。また、QuickTime Pro の機能を有効にするための QuickTime 7 Pro の登録コードを使用できます。
 とりあえずQucikTime 7をインストールして、「Show A/V Control」(Command + K)で再生スピードなどコントロール出来るウインドウが開くので、機能的にはここまでで完結。
Automatorでアプリ化 上記までだと、一々ファイルをFinderで開いて、QuickTime Player 7で起動するという手順が必要なので、Automatorを使って省力化してみる。
tell application &amp;quot;iTunes&amp;quot; pause --iTunesで選択中・再生中のファイルおよびその再生位置を保持 set my_track to location of selection set my_seconds to player position end tell tell application &amp;quot;QuickTime Player 7&amp;quot; open my_track set my_movie to first document set ts to time scale of my_movie --とりあえず1.</description>
    </item>
    
    <item>
      <title>OSX 10.10(Yosemite)やiOS 8にアップデートして困ったこと</title>
      <link>https://mono0926.com/lifehack/yosemite/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/lifehack/yosemite/</guid>
      <description>例のごとく、何も考えずにメインマシンをOSX 10.10(Yosemite)・iOS 8にしてしまいましたが、いくつか細かいトラブルが。 でも概ね問題無く使えていて満足（´-ω-｀）
NDAに気をつけつつ困ったことや解決法など(　´･‿･｀)
OSX 10.10(Yosemite)にアップデートして困ったこと PCKeyboardHackが起動しない 【追記】PCKeyboardHack-10.7.0がリリースされました！ 去年もこれで困ったことを思い出しました。 Realforceでスペースの両隣のキーでの日本語入力切り替えが効かずにとても不便です。 Apple純正キーボードだと問題ないですが。
と思いつつ、Issuesを覗いたら、Add 10.10 support #31ですんなり解決(　´･‿･｀)
何も考えずこれを打ったら問題無く動くように。
sudo /sbin/kextload &#39;/Applications/PCKeyboardHack.app/Contents/Library/PCKeyboardHack.10.9.signed.kext&#39;  BetterTouchToolが起動しない 【追記】Yosemite対応版のBetterTouchToolがダウンロード出来るようになりました！ これもOS X 10.10 Yosemite » BetterTouchTool, BetterSnapTool &amp;amp; SecondBarにすでに記事が上がっていて、現時点ではまだダウンロード出来ないけどまもなく対応版がリリースされる模様。
 BetterTouchTool crashes on startup, but I already identified the issue and will fix it tomorrow.
 Alfredも、Keynotes直後にすぐこんなポスト投稿するなど、どこも動きが速くて素晴らしい(　´･‿･｀)
Calm down everybody, Alfred isn’t going anywhere (but up) in OS X Yosemite :) http://t.co/wh1mMnxrkt
&amp;mdash; Alfred App (@alfredapp) June 2, 2014</description>
    </item>
    
    <item>
      <title>SwiftでラヴさんWEBアルバムを開くだけのアプリ作った</title>
      <link>https://mono0926.com/programming/swift/</link>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/swift/</guid>
      <description>昼休みに、Swiftで、ラヴさんWEBアルバムを開くだけのアプリ作った。
Swiftもそうだけど、Xcode 6も色々変わってて面白い(　´･‿･｀)</description>
    </item>
    
    <item>
      <title>RescueTimeを昨日から使い始めた</title>
      <link>https://mono0926.com/lifehack/rescuetime/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/lifehack/rescuetime/</guid>
      <description>RescueTimeを昨日から使い始めたけど、素晴らしい。 多少カスタマイズ出来るけど、ほぼ初期設定で、すごく良い感じにデスクワークの統計を取ってくれる。 そんなのがあるとかは、『RescueTime』で、お仕事状況をすべてチェック（無料） : ライフハッカー［日本版］などで知りつつスルーしてたけど、PocketHits (PocketHits) on Twitterで流れてきたProductivity Hacks From Startup Execs - Business Insiderを見て試してみたらはまった感じ。
学生時代にライフログの研究していたのもあって、こういう生活のデジタルデータを集めるのはすごく興味がありました。 でも、例えばわりと最近流行りの腕に巻いて生活強度を計るようなデバイスとかGPSで移動経路を取得するのは、結局運動パターン的には平日ほぼ毎日変わり映えの無いものに帰着するし、たまに動くと別にデータを見せられるまでもなく自覚しているし、という感じでしっくり来なかった。
しかし、日々のデスクワークをデータで表示してくれるのは、けっこう変化あって面白いし、自分の行動へのフィードバックにもなると感じたり。
本日の活動はこんな感じ。 フルでパソコンに向かっていると1時間当たりの分母は60分になるけど、移動中や退席中などデスクを離れていると分母自体が減ります。
今朝は自宅で4時くらいから開発系作業とまったりニュース記事閲覧をして、会社に移動して仕事しつつ、ちょっとニュース見て息抜きしてまた仕事復帰して昼休みになり、昼休み明けはゆるめに仕事開始しつつ、夕方前後に再びピークに持っていって帰るみたいな感じで、かなりキレイにログが取れてる。
今日はXXXが多すぎたなとか、今日はよくがんばったとか、あるいは週や月の統計を見るとさらに色々自分のペースを客観的に見れそうで楽しみ。
ここまで良い感じに見せられると、productivityやsoftware developmentの数値を上げてハイスコア狙いたくなるなど、ゲーミフィケーション的な要素もあったり。
目標も自分で設定出来て、今日は、生産的な時間・開発に費やせた時間・気が散った時間、ともに目標値を超えて良かった。
というわけで、しばらく続けようと思う。 続けること自体は何の負担も無くて素晴らしい。 ただ、スコアを高く維持しようとしてると、捗る一方疲れてきそうな懸念もあり（´-ω-｀）
時間を気にしすぎると、ただいるだけで実際の成果を伴わないとかありがちだけど(残業代目当ての無駄な残業など)、これはその質自体も評価されるから、自然とそれも防げるような感じになっているように思う。</description>
    </item>
    
    <item>
      <title>NodeJS &#43; Express &#43; Stylus &#43; Jade &#43; AngularJS &#43; Redisなどなどで、簡単なTODOアプリ</title>
      <link>https://mono0926.com/programming/todo/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/todo/</guid>
      <description>NodeJS + Express + Stylus + Jade + AngularJS + Redisなどなどで、簡単なTODOアプリ作った。
TypeScriptリファレンス Ver.1.0対応のサンプルを参考に、アレンジした感じ(オリジナルはSQLiteなど使用)。
Redisでのデータの持ち方はケーススタディ — redis 2.0.3 documentationである程度分かったけど、なかなか迷うところや困るところも多いので、Redis入門読んでじっくり勉強中。 TODOアプリでは、なんとか動作自体は出来たけど、ちょっとしっくり来ないところもあったり。
「Redis入門」というタイトルだけど、原書はRedis in Actionなだけあって、けっこう歯ごたえのある内容。一通り理解して手を動かせば、RedisやKVSのパラダイムに慣れられそう。
サーバーサイドは外部モジュール使ってるけど(import xxx = require(&#39;yyy&#39;)形式)、クライアント側は内部モジュール形式で書いて手動で下記を実行して連結しているのも微妙なので、改善したい（´-ω-｀）他はWebStormで普通に実行したり、herokuへのデプロイはGitのPUSHで出来て楽なのだけれど（´-ω-｀）
tsc @compile.tscparams  AngularJSとJadeのおかげで、HTML部分がすごくクリーンになっているのはとても良い感じ(　´･‿･｀)
 </description>
    </item>
    
    <item>
      <title>TypeScript・AngularJS・Jade・Stylusでサンプルコード</title>
      <link>https://mono0926.com/programming/angularjs/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/angularjs/</guid>
      <description> 最近Web系の勉強してて、Node.js・Express・Redis・Herokuなどサーバーサイド周り弄ってたけど、そろそろフロントエンドもという感じで色々やってみた。
サンプル置いとく AngularJSはけっこうリッチなライブラリで、全部身につけるのはしばらくかかりそうだけど、今日主要な機能はざっくり書けるようになった感(　´･‿･｀) Vue.jsと迷ったけど、borisyankov/DefinitelyTypedにまだ無かったし、とりあえず今メジャーなAngularJSやっとこうか、という感じ。
JadeとStylusは記法いくつか覚えらればわりとサクサク書けて、気に入った。これ系いくつかあるけど、どれがいいんですかね。あまり比較検討せずに決めてしまった。
 AngularJS: MVW(Model-View-Whatever)フレームワークというらしい。Whatever=厳密に定義しない、みたいな意味らしい。JS・HTML周りのスパゲッティコード解消。MV*とかはともかく、とりあえずバインディング機構あるのが嬉しい。 Jade: HTMLの簡易記法 + αの機能 Stylus: SASS・LESSの後発版みたいな感じ？  資料  AngularJS使い方メモ - Qiita AngularJS - お前のAngular.jsはもうMVCではない。と言われないためのTutorial - Qiita AngularJSのMVWパターンを理解する - Qiita AngularJS: Developer Guide: Conceptual Overview Node.js - Jadeの記法について（あまりまとまっていない） - Qiita Jade Template Syntax Documentation by Example  一気に色々やると破綻しそうかと心配だったけど、意外とスムーズに出来たのは良かった。
AngularJS、AngularJS使い方メモ - Qiitaの「ページの一部に動的にテンプレートを読み込む」くらいまでで、まだシングルページアプリケーション周りの機能は終えてないから、また続きやろう（´-ω-｀）
コード    </description>
    </item>
    
    <item>
      <title>golangの環境構築</title>
      <link>https://mono0926.com/programming/golang/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/golang/</guid>
      <description>GoCon/2014spring.rst at master · GoCon/GoConに備えて、とりあえずgolangのセットアップと、暇なときにA Tour of Goをやっておこうかと(　´･‿･｀)
gvmセットアップ moovweb/gvmに書いてある通りにやった。 mercurialのインストールが必要だったので、Brewfileに追記しておいた。
あと、gvm install go1に失敗したので、Issues on OSX · Issue #38 · moovweb/gvmに書いてある対応で何とかなった。
普通にbrew install goのが楽だけど、ちょっとがんばった（´-ω-｀）
実行 以下を実行。
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Printf(&amp;quot;Hello world!&amp;quot;) }  OSXの開発環境を整えた - monoHubでJetBrainのIDEいくつかインストールしてたけど、IntelliJ IDEA — The Best Java and Polyglot IDEで全部包含してるのね、情弱つらたん（´-ω-｀）
まあそこそこのお値段だし、適当に色々試用して、良かったら最終的にUltimate Edtion買おうかな（´-ω-｀） Web StormでもGoのプラグインインストール出来たけど、SDKの設定とかうまく出来なかったりぐぐったりして出た説明と違うからCommunity Edition版のIntelliJでやった。
実行できたけど、go build hoge.goで生成されるような実行ファイルが生成出来なくて謎(　´･‿･｀)
GOROOT・GOPATHもどこで設定すべきかとかその役割とかよく分からなくてつらたん（´-ω-｀）
解決  go-lang-idea-plugin/Missing ENV.md at master · go-lang-plugin-org/go-lang-idea-pluginを参考に設定したら、警告ダイアログが出なくなった。 Run Configurationsで、Build before runにチェックを付けてディレクトリをbinに設定したら、実行ファイルも生成されるようになった。  ただ、多分IntelliJがGoのデバッグ実行に対応していない？(無反応)のがつらたん（´-ω-｀） Support for debugging · Issue #25 · go-lang-plugin-org/go-lang-idea-pluginを見ると、GAEプロジェクトのみ対応？？よく分からない（´-ω-｀）</description>
    </item>
    
    <item>
      <title>OSXの開発環境を整えた</title>
      <link>https://mono0926.com/programming/renew/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/renew/</guid>
      <description> Node.jsで色々遊ぼうと思いつつ、開発環境がけっこう汚れていることに気づいたので、整理。 Node.jsのgenerator使いたくて、バージョン0.11系と0.10系をスイッチしたいなとか思ったのが発端。
参考: Node.jsのコールバック地獄をPromiseやGeneratorを使って解消する - HackerNews翻訳してみた
わりとbrew install XXXで雑に各種環境インストールしてたので、これを気に色々直した。
Homebrewアンインストール ゴミが残るのいやだったので、Uninstall Homebrewでhomebrewをアンインストール。
Brewfile導入 以下など見て便利そうだと思っていたので、Brewfile導入。
 Mac OSX をクリーンインストールしてからの環境構築メモ - Shin x blog 「BrewfileでHomebrewパッケージを管理する」をやってみた - sonots:blog MacBook にインストールしているアプリやツールをメモする代わりに Brewfile を作った - present  これだけで一気にインストール出来てとても便利。
brew bundle  僕の：Environment/OSX/Brewfile at master · mono0926/Environment
今後も、Homebrewで何か新しくインストールするときメンテナンスしていくようにしよう。
その他開発環境 brew install XXXで適当にインストールせずに、バージョンの切り替えが容易なようにした。 いくつか種類あったけど、基本後発のを導入してみた。
 Python: yyuu/pyenv Ruby: sstephenson/rbenv Node.js: creationix/nvm  nvmはzshとの相性悪くて日本ではhokaccha/nodebrewがけっこう人気っぽかったけど特に問題無かったのでnvmにした。   諸々雑なところがあるけど、Environment/OSX at master · mono0926/Environmentでセットアップスクリプト管理。
IDE導入 スクリプト系言語は、最近はわりとSublime Textで書いていたけど、やっぱり補完がもう少し聞いてくれないと厳しいので、なるべくIDE使うようにしようと思う。
IDEに慣れるのもそこそこコストだけど、JetBrain系で統一すれば捗るかなと。
今まではNetBeansかたまにEclipseだったけど、乗り換え。少しずつ慣れていこう（´-ω-｀）
 WebStorm :: The smartest JavaScript IDE Ruby on Rails IDE :: JetBrains RubyMine Python IDE &amp;amp; Django IDE for Web developers : JetBrains PyCharm  CE版は無料   </description>
    </item>
    
    <item>
      <title>IRKitで遊び始めた〜とりあえずTerminalで操作〜</title>
      <link>https://mono0926.com/programming/irkit/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/irkit/</guid>
      <description>冬場忙しかったりで既存アプリで部屋のリモコン登録する程度しかいじれてなかったけど、最近ようやく落ち着いてきたので、IRKitで遊んでみる(　´･‿･｀)
セットアップ IRKit - Open Source WiFi Connected Infrared Remote Controllerを参考に、諸々設定。
# dns-sdコマンドで、IRKitのインスタンス名取得。 Pro:b4 mono$ dns-sd -B _irkit._tcp Browsing for _irkit._tcp DATE: ---Mon 05 May 2014--- 14:41:16.669 ...STARTING... Timestamp A/R Flags if Domain Service Type Instance Name 14:41:16.880 Add 2 4 local. _irkit._tcp. iRKitA2C4  # インスタンス名から、IPアドレス取得 Pro:b4 mono$ dns-sd -G v4 irkita2c4.local DATE: ---Mon 05 May 2014--- 14:41:43.565 ...STARTING... Timestamp A/R Flags if Hostname Address TTL 14:41:43.566 Add 2 4 irkita2c4.</description>
    </item>
    
    <item>
      <title>IRKitに外からアクセス出来るようにした</title>
      <link>https://mono0926.com/programming/irkit-remote/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/irkit-remote/</guid>
      <description>前回のIRKitで遊び始めた〜とりあえずTerminalで操作〜 - monoHubの続き。
前回触ったIRKit Device HTTP APIは同じWiFi内から操作するためのもので、外からアクセスするときはIRKit Internet HTTP APIを叩くことになる。
IRKit Internet HTTP APIを叩けるように準備 まずは、clienttokenを取得。
Pro:~ mono$ curl -i &amp;quot;http://192.168.0.4/keys&amp;quot; -d &#39;&#39; HTTP/1.0 200 OK Access-Control-Allow-Origin: * Server: IRKit/1.3.5.0.gce6ac15 Content-Type: text/plain {&amp;quot;clienttoken&amp;quot;:&amp;quot;**************************&amp;quot;} #伏せています  取得したclienttokenを元に、deviceidとclientkeyを取得。
Pro:~ mono$ curl -i -d &amp;quot;clienttoken=**************************&amp;quot; &amp;quot;https://api.getirkit.com/1/keys&amp;quot; HTTP/1.1 200 OK Server: ngx_openresty Date: Mon, 05 May 2014 06:44:32 GMT Content-Type: application/json; charset=utf-8 Content-Length: 94 Connection: keep-alive Access-Control-Allow-Origin: * Access-Control-Allow-Headers: X-Requested-With X-Content-Type-Options: nosniff {&amp;quot;deviceid&amp;quot;:&amp;quot;XXXXXXXXXXXXXXXXXXXXXX&amp;quot;,&amp;quot;clientkey&amp;quot;:&amp;quot;YYYYYYYYYYYYYYYYYYYYY&amp;quot;} #伏せています  Internet HTTP APIを使ってみる deviceid・clientkey・家のライトのオンオフ信号をhttps://api.</description>
    </item>
    
    <item>
      <title>Node.jsのIRKitライブラリあったから試してみた</title>
      <link>https://mono0926.com/programming/irkit-nodejs/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/irkit-nodejs/</guid>
      <description> せっかくNode.js the Right Way: Practical, Server-Side JavaScript That Scales [Kindle Edition]でNode.jsを勉強したので、IRKitをNode.jsの勉強題材に出来ないかなと思って、とりあえずNode.jsのクライアントライブラリ無いかな？と探したらあったので、叩いてみた。
dameleon/node-irkit 元々IRKitのAPIがシンプルなので、あまりNode.jsを使う必然性感じないけど、まあ勉強に（´-ω-｀）
本1冊やったとはいえ、色々まだ不慣れなので、コード読解にも良いかも。 ドキュメントは無いものの、テストはちゃんと書かれていたので、それを参考に使ってみた。
まずはインストール。
npm install node-irkit  とりあえずlocalApiを使ってみた。 実行する度に、部屋の電気がオンオフされて煩わしいので、テストは違う信号でやろうと思ったなう（´-ω-｀）
const irkit = require(&#39;node-irkit&#39;), localApi = irkit.getLocalApi(&amp;quot;http://192.168.0.4&amp;quot;), myRoomLight = &#39;{&amp;quot;format&amp;quot;:&amp;quot;raw&amp;quot;,&amp;quot;freq&amp;quot;:38,&amp;quot;data&amp;quot;:[17421,9061,1037,1232,935,3458,935,1190,1073,1190,1073,1190,1190,1190,1073,1190,935,3458,1037,3341,1037,1190,935,3458,1002,3458,1002,1111,1111,3341,968,3458,968,1150,1150,3458,1037,3341,1037,1275,1002,3458,1002,1190,1037,3341,1037,1150,1150,3341,1037,1190,935,1275,935,3458,1037,1190,1002,3458,1037,1232,935,3458,1111,1111,1111]}&#39;, myRoomLightMessage = JSON.parse(myRoomLight); localApi.postMessages(myRoomLightMessage, function(err, res) { console.log(res); //空 });  </description>
    </item>
    
    <item>
      <title>ラヴさんスタンプをLINE Creators Marketに申請してみた</title>
      <link>https://mono0926.com/line-stamp/love-stamp/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/line-stamp/love-stamp/</guid>
      <description>2月下旬に発表され、本日受付を開始したLINE Creators Marketに、自作スタンプを申請してみました。
思えば、3月上旬くらいに、当時IllustratorやPhotoshopを勉強していたこともあり、その演習にちょうどいいのでは？と思いつき、挫折しそうと思いつつ着手したのが始まりでした。
朝3時前に起きて出社前に5枚くらい描く時もあれば、しばらく間が空いてしまう時もありつつ。 そんなにスムーズに絵を描けない中、40枚は正直すごくしんどかったです（´-ω-｀）
なんやかんやで、色々な人に励まされたり助けて貰いながら、完成にこぎつけられてとても嬉しいです(　´･‿･｀)
色々雑なところがありつつ、申請は通ってほしいなー、というところです。 無事に5月にマーケットに上がることを祈ります。 改良アップデートや続編とかも作りたいなーと思ったり。 今回はローンチリリースを目指していたため締め切りがつらたんだったけど、次はもう少しゆとりをもってやりたいところです（´-ω-｀）
ラヴさんスタンプ公開アルバムを勤めている会社のサービス「Scene ありそうでなかった、写真アプリ」のアルバムとして作ったので、そこでパラパラスタンプ見たりフィードバックとかいただけたら嬉しいです(　´･‿･｀)</description>
    </item>
    
    <item>
      <title>オーム社セールで色々買ってみた</title>
      <link>https://mono0926.com/book/ohmsha/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/book/ohmsha/</guid>
      <description> 今日12時までのオーム社セールで色々買ってみた。
数学・統計系 大学とかで勉強したものの、忘れたり応用できていなかったりするので。
 プログラミングのための線形代数 数学チュートリアル やさしく語る 確率統計 入門 統計学 ―検定から多変量解析・実験計画法まで― Excelで学ぶ統計解析入門 Excel2013/2010対応版  Excelでちゃちゃっと出来るのは大事だと思う   読み物系 本当はKindleで読みたい類の本だけど（´-ω-｀）
 情熱プログラマー ソフトウェア開発者の幸せな生き方 ソフトウェアの世界でキャリアを築く Making it Big in Software  その他  マスタリングTCP/IP 入門編 第5版  第4版持ってて自炊済みだけど、安いし新しいのも欲しくなった   </description>
    </item>
    
    <item>
      <title>Haskell勉強中</title>
      <link>https://mono0926.com/programming/haskell/</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/haskell/</guid>
      <description>2週間くらい前からHaskell勉強中。
各種言語使ってきて、今の本業(Objective-C)や一番得意な言語(C#)以外にも久々に手を出したいなと思って以下を検討。
 LL系(Pythonなど)をもう少し自由に使えるように  ベターな書き方やモジュール知らずに冗長な記述になっていそう 日頃の自動化が捗りそう  ネイティブ系  C言語が最低限しか書けない上に段々忘れていったりもしている ネイティブ系(コンパイル型・非VM)で書かなきゃいけない時とか手駒がない とはいいつつCもC++も積極的に書きたくないのでやるとしたら下記のいずれか Go D言語  関数型  C#でLINQとかラムダ式とか慣れたけど、関数型の書き方を一部取り入れたオブジェクト指向という感じで、純粋関数型言語を学びたい pandocというドキュメント変換ツールのソース理解とか改変とかしたいと思いつつHaskellで書かれていて全然分からない   まあどれでも良いかなあと思いつつ、Scalaとかも勉強したいとか思っていたのもあり関数型かなあと、とりあえずKindleで安く手に入るGuide to ScalaーScalaプログラミング入門をざっと読んだ。 結果、C#と大して変わらず(Scalaの方がより関数型っぽいけど)、ちゃんと勉強するなら純粋関数型言語だなあと思い、pandocの理解にも繋がるしHaskellを勉強することに。
コンパイル型といえども、記述もシンプルでコンパイル簡単なので、今Pythonとかで簡単な自動化スクリプト書いている代替にもなるかなと。
勉強計画 すごいHaskellたのしく学ぼう! 少し前に話題になっていたこの本をまず読むことに。 洋書にするか迷ったけど、せっかく和書のKindle版もあるのでそれに頼った。
そして、オンライン版はフリーで読めることもさっき知ったり：Learn You a Haskell for Great Good!
フリーということは…と思って探したら、Kindle用のファイルを生成出来るプロジェクトもあったり。 ただ、本に出てくるソースコード集が見つからず、まあいいか。
本の前半は、Haskellの構文に慣れるのに少し苦労しつつ、後半のアプリカティブのあたりでけっこう理解が怪しくなってきた（´-ω-｀） 理論が理解出来ていなくてしっくりこないところが一部あるものの、コードの挙動などは何とか読み解けているのでまだなんとかいけるはず。
その後 Parallel and Concurrent Programming in Haskellが面白そうなので、次に読みたいところ。並列/並行処理周りがまだ弱い気がするのでその勉強もかねて。
あと、個人的に同じ本を繰り返し読むのが苦手(それが大事なのは理解している)なので、代わりに本物のプログラマはHaskellを使うとか読んで曖昧なところの理解を深めて行ければ。
実行環境 GHCインストール 色々処理系があるようだけど、標準のGHCを導入。 よく分からないけど、Homebrewで良いかと、以下を実行してインストール。 Mavericksなどの場合は環境によっては前もってCommand Line Toolsのインストールをしないとビルド失敗したりするはず。
brew update brew install haskell brew install haskell-platform # これがなんだか理解していない  これで、ターミナルでghciと打つと、Haskellのインタプリターが起動するはず。 今まで、わざわざファイルで書く必要の無い書き捨ての込み入った計算はPythonのインタプリターでやっていた(そこまでする必要の無い程度ならAlfredの電卓で)けど、これからはghciでやろうかなと。</description>
    </item>
    
    <item>
      <title>Mac Proの新モデル(通称ゴミ箱)を買うことにした</title>
      <link>https://mono0926.com/lifehack/mac-pro/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/lifehack/mac-pro/</guid>
      <description>今持っているMac Proの2010年モデルももう丸3年以上経っていたり、2011年モデルのMac mini(サーバー用)も切り捨てて1本化したいなと思ってたところに、新Mac Proが発表されて、ちょっと考えてたらほしくなってしまった。
購買意欲がそそられた理由 省電力というのが意外と一番大きな理由。 Mac Proの消費電力が、アイドル時に43 Wということで、常時起動でも700円/月程度で、Mac miniの用途をMac Proに一本化できそう。
新Mac Proを常時起動にすると、Mac Pro1台で下記の用途全てまかなえる。
 普段利用(OSX) OSXサーバー Windows開発機 Windowsサーバー  また必要に応じてiPadやWindows RT機からリモートアクセスとかすると、家には1台 + 持ち歩き用に安価軽量なモバイル端末という、組み合わせができる。 常時起動なので、ファイルや音楽・動画などメディア系リソースへのアクセスもいつでも出来るし。
今、SSD・フルHDのそこそこ良いWindowsノートも持っているけど、これも次の買い換えでSurface(非Pro)とかにしたりで持ち運び楽かつ買い換えコストも抑えられる。 そもそも、iPad AirとかでWindows開発環境にアクセスすればいいので、Windowsのモバイル端末は不要になるかも(もちろんネット環境悪いところでは制約が出るけど)。
ネック 後述のお金の問題に加えて、以下の作業が面倒。
増設したHDD Mac Proに入れているSSD(256GB)x2・HDD(2TB)x2・HDD(3TB)x1を、新Mac Proだと外に出して繋がないと行けなくなる(SSDのうち1台はメインドライブなので不要だけど)。 そのケース・ドライブを用意したりとか、その配線が微妙かなあとか、ちょっと悩みどころ。
旧ブログ 今Mac miniで動かしている、IIS + WordPressで構築した旧ブログ の移行が面倒。 そもそももう更新していないので畳むか、変換スクリプト書いて、こちらのブログに移行してもよいかも。
その他Windowsサーバー環境移行 Amazon Sales Rankのサーバー環境の移行は、1・2時間くらいで出来そう。
少し前まで、Windows系のソース管理は自前のTFSでやっていたけど、それもGitHubに移行したのであとは特に必要な作業無さそう。
そして、新Mac Proに乗り換えたら仮想マシン立てるつもりなので、その後の移行作業はとても楽になるはず。
移行コスト 計算してみたら、デスクトップ系のMac製品は中古相場もあまり高くなく、思っていたよりかかる模様。 Mac Proはヤフオク見るともっと相場高いので、そちらもありかも。
 新Mac Pro：カスタマイズオーダーや、自分でカスタマイズしたり外付け用ドライブ含めて、〜40万円 Apple Mac Pro MC560J/A (Mid 2010)売却：〜5.8万円 (じゃんぱら価格) Mac mini MC815J/A (Mid 2011)売却：〜3.1万円 (じゃんぱら価格)  計〜30万円程度かかるので、けっこう高い（´-ω-｀）</description>
    </item>
    
    <item>
      <title>iOS7対応記事のまとめ</title>
      <link>https://mono0926.com/programming/ios7/</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/ios7/</guid>
      <description>iOS7関連のNDA解禁ということで、色々記事が増えてきたので、メモ。 少しずつ追記していきながら、落ち着いたところで、集約したような記事書くかも。
 iOS 7対応事例 FastCheckin iOS6からiOS7への対応 iOS 7向けアプリ開発時の注意点 iOS7でNavigationBarに入れたSearchBarにキャンセルボタンを出現させる方法 iOS6 -&amp;gt; iOS7変更対応 iOS 6&amp;frasl;7 で UILabel などの見た目がずれるよ〜とお嘆きのあなたへ CocoapodsとXcode5の組み合わせでエラー出た+解決した iOS7でステータスバーが被る問題への対応 iOS7のarm64対応でやったこと iOS7でナビゲーションバーやステータスバーの文字色を変える iOS 7 でステータスバーを隠す方法  </description>
    </item>
    
    <item>
      <title>GingerをAlfredで使えるようにしてみた</title>
      <link>https://mono0926.com/programming/ginger/</link>
      <pubDate>Sun, 04 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/ginger/</guid>
      <description>Ginger APIをPythonで叩いてみたの続き。
元々はAlfredで英文校正が出来るようにしたかったので、ここからが本番。
完成版 こんなのが出来たという紹介から。
校正 ginger というキーワードに続けて英文を打つと、正してくれる。(この場合、冠詞aの抜けが正される。)
改善候補一覧 rephraseというキーワードに続けて適当な英文を打つと、より自然な言い回し候補を出してくれる。 &amp;ldquo;Thank you for your reply&amp;rdquo;は、メールの返信とかでよく使うけど、ワンパターン化を避けたい時とかに使えそう。
ともに、選択状態でエンターを押すと、クリップボードにコピーされて、フォーカスの当たっているアプリにペーストされるので、適当にメールとかエディタとか使いながら自然と正しそうな英文が打てるようになるはず。
AlfredのWorkflowの作り方 一応ドキュメントはあるけど、肝心なところが書かれていなかったりして、フォーラムで聞いたり、既存のWorkflowのソースを読んで作り方を学ばなければいけない感じ。 作り方自体は基本簡単だけど、ちょくちょくはまりどころがあって苦労する。
キーワードの受け取り {query}というキーワードでアクセス出来るので、それをスクリプトに引数ととして渡すのが一般的。
結果の表示 処理終了時にnotification飛ばしたり、クリップボードにコピーとかはWorkflowのエディタでパーツをつなぎ合わせたりするだけで簡単だけど、上の例みたいに一覧するのはどうやるのかと思っていたら、XMLで標準出力するらしい。 関係ないechoやprint文があると壊れるので注意。 ここらへんも、既存のソース読み解いてやっと分かった。それも不慣れなPHPソースがけっこう多くてアレ。
こんな感じのXMLを標準出力すると、Itemの数だけ一覧される。
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt; &amp;lt;items&amp;gt; &amp;lt;item arg=&amp;quot;I am a programmer and writing bad English. I am Japanese.&amp;quot; uid=&amp;quot;d78b56b0-fcb7-11e2-9787-e80688cb3920&amp;quot;&amp;gt; &amp;lt;title&amp;gt;I am a programmer and writing bad English. I am Japanese.&amp;lt;/title&amp;gt; &amp;lt;subtitle&amp;gt;Gingered sentence&amp;lt;/subtitle&amp;gt; &amp;lt;icon/&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;/items&amp;gt;  これも適当に文字列置換したりして作れるけど、PythonでXML組み立てて作る簡単なモジュール作って再利用できるようにしておいた。 ここらへんの下回りがけっこうこなれていない感。
インストール可能なパッケージの作り方 配布されているworkflowは、*.alfredworkflowという形式で、ダブルクリックでインストールできる。
簡単なやり方は自分のworkflowを右クリックしてExportすること。
逆にscript群からコマンドで作りたい場合は、必要なファイルをzip化して拡張子を変えればよい。 info.plistが必要で、それは多分コマンドラインじゃ作れないから、やっぱり最初はExportの過程が必要だけど、コードとか別管理したいならコマンドラインで修正版作るのがよさげな気がする。
適当にpackage作成スクリプト書いた。
cp ginger/info.</description>
    </item>
    
    <item>
      <title>Leap Motionが届いた</title>
      <link>https://mono0926.com/gadget/leap-motion/</link>
      <pubDate>Thu, 25 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/gadget/leap-motion/</guid>
      <description>Leap Motionを買ってみた。
多分1年ちょっと前に指先を1/100ミリ単位で捉える3Dモーション入力機器 LEAP、70ドルで予約受付開始 (動画)などの記事を見て、コンセプト動画なのか実動画像なのか知らないけど、すごいなーと思って放置してたけど、今週けっこう話題になってて、記事とか読んでたらいつの間にかポチってた感じ。
ハード的には、劣化版Kinect？とかも思ったけど、対象距離が近距離なKinect for Windowsは少しお高いし、設置の制約あるし、とか思ってとりあえず今回はこっち。 KinectはごくたまにXboxで遊んだりと、なかなか好きなデバイス。
Leap Motionって何？とかどんなことできるの？とかについては下の動画見れば大体分かる。 
届くまで 実は、いいなーと思いつつも購入をためらっていたけど、偶然[BetterTouchTool]()のアップデートが走ってリリース文章見ていたら、Leap Motionの文字があって、「おっ!」と思いそのまま買ってしまった感じ。 今見たら、紹介ブログがあった。 元々愛用しているツールだけど、こういう早くて先進的な対応は好感度上がる。 OSもアプリもわりとリリース文には目を通している(利用者目線でも開発目線でも読んでいるとけっこう有用に思う)けど、良いきっかけになってよかった。
この購入サイトで購入。 PayPal決済でトータル1万円弱。カード決済用のトータル表示より安かったような(見間違えかも)。
入荷や発送の関係でしばらく待つかなーと思っていたら、翌朝発送しましたメールが来てびっくり。 FedExという郵送会社だった。 たまに海外購入はするけど、多分初めての利用。 翌々日に届くとのこと。お早い。
というわけで、一昨日の晩に頼んだLeap Motionが到着。
簡単なレビュー 詳細なレビューとかはすでにけっこうあるので、下記参照。
 Leap Motion は本当に革新的なUIデバイスなのか? 本体レビューとその雑感【@maskin】 手と指の動きを感知して奥行きまで含めた立体的な操作ができる「Leap Motion」は一体何がすごいのかまとめ  開封まで シンプルな箱。
本体とUSBケーブルとしょぼい冊子だけ。
ガムくらいの大きさ。
セットアップ マニュアル無いから適当にググったら、このセットアップサイトでドライバ&amp;amp;アプリをインストールするとのこと。(あとで見たらボール紙みたいなものにそのURL書いてあったけど)
そこにたどり着けばすごく簡単で、ぽちぽちっと適当にインストールしてチュートリアルで試用する感じ。
どうやって使おう とりあえずBetterTouchToolと組み合わせて、良い感じに普段使い出来ないか試してみてるところ。 人差し指をクルクルすると、音量上げ下げしたり、手を叩くとスリープするようにしたりして、意外と実用的に使えそう。
↓YouTubeにアップしてみた。
 セッティングはMagic Trackpadのジェスチャー登録するような感じでとても簡単。若干認識が微妙だけど、ハードウェア性能とソフトウェアとどっちのせいかは不明。現状でもそんなに悪くないし、今後のソフトウェア改良に期待は持てる感じはしてる。
あと、アプリストア「Airspace」とかのアプリで遊んでみようとも思うけど、ゲーム系はすぐ飽きちゃいそう…（´-ω-｀）
というわけでまだあまり弄れてないけど、これから色々遊んでみたり、開発にも手を出していきたいなと思ったり。
開発リソースはけっこう整っている感。 これ系の開発は結構前にカメラ + OpenCVを少しやった程度だったりして、個人的にはけっこう苦労しそうだけど（´-ω-｀）
 SDK Documentation  C++ Java Python C# JavaScript Objective-C (この一覧には明記されていないけど対応してる)  Forums LeapMotion(YouTube) C#開発者から見たLeap Motion開発のファースト・インプレッション Developing for Leap Motion in C# Tutorial (video, slides and code) JavaScriptでLeapMotionアプリを作る方法  Windows 8を操作しているデモ動画 なかなか操作の相性が良さそう。動画を見ただけだと実はタッチよりも快適？とか思ったり。</description>
    </item>
    
    <item>
      <title>iOSからDropbox Sync APIを使ってみる</title>
      <link>https://mono0926.com/programming/dropbox/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/dropbox/</guid>
      <description> Dropbox Sync APIとは サンプルとドキュメント  サンプル  Datastore API SDKsからSDKダウンロードすると同梱されてる  ドキュメント  Datastore API for iOS Documentation  チュートリアル  Using the Sync API on iOS   サンプル起動 Files Examplesのサンプル </description>
    </item>
    
    <item>
      <title>電子書籍自費出版系情報まとめ</title>
      <link>https://mono0926.com/lifehack/self-publish/</link>
      <pubDate>Sun, 14 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/lifehack/self-publish/</guid>
      <description>最近、電子書籍系のアプリ開発中で、色々調べています。 ちょっと情報が頭に乗り切らなくなってきたので、整理。
ツール Kindlegen Amazon謹製の、HTMLやEPUB形式からMobi形式に変換するツール。 成果物は、MacなどのKindleアプリでも見られるし、Kindle Previewerで、各プラットフォームでの動作チェック可能。
クラス構造を一旦HTMLに落とし込んで、Mobi形式にエクスポートするところまでは出来たけど、いくつか警告が出てたりしてまだ対処出来ていない状態。 あと、ライセンス的にアプリのサーバー側で使ったりOKなのか気になる。
 リファレンスなど  Amazon Kindle Publishing Guidelines 和訳：Amazon Kindle パブリッシング・ガイドライン   Pandoc ドキュメント形式変換ツール。Markdown, HTMLなどからEPUB, PFDなどなどなど色々変換可能。 Linux, Mac, Windowsなどに対応。
 リファレンスなど  ソース(GitHub) Pandoc User’s Guide 使い方がたくさん書いてある。   例えばMarkdown形式からEPUB形式にしたいときの、タイトルや筆者などのメタ情報とかこう書いたりするらしい。まだ色々調べ中。 これを使って、クラス構造をEPUB形式でエクスポートできるところまでは出来たけど、細かい詰めがまだまだ（´-ω-｀）縦書きとか出来るのだろうか…。
% title % author(s) (separated by semicolons) % date   参考  多様なフォーマットに対応！ドキュメント変換ツールPandocを知ろう 素晴らしい説明 githubとかにあるMarkdown形式のﾌｧｲﾙをhtmlとかEPUBとかに変換する   本 Amazon和書  Kindle自費出版ガイド 米アマゾンの先例から学ぶ電子書籍の作り方  Google Documentを使った作成法指南 Webで最新版を無料公開中：「Kindle 自費出版ガイド 米アマゾンの先例から学ぶ 電子書籍の作り方」(前半)  アマゾンで売る！　一番簡単な電子書籍の作り方  Google Documentは参考程度に、aozoraEpub3やSigilを利用  一万冊売ってわかった！電子書籍を売る方法  世界一周紀行など書いている人の本。ライブドアブログのEPUBエクスポートを利用。   うーん、作り方がバラバラ。わりとGoogle Documentで作るのが多数派な印象だけど。 みんなGUIベースだから直接は利用できないけど、参考程度に読んでる。</description>
    </item>
    
    <item>
      <title>GitHub &#43; Octopressでブログ作ってみた</title>
      <link>https://mono0926.com/blog/github_octopress_blog/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/blog/github_octopress_blog/</guid>
      <description> Markdownで書けてなかなか良い感じかもしれない（´-ω-｀）
導入手順 ここらへん参考に。
 GitHub pages + Octopressの導入  最初は適当にMacに入っているRuby 1.7.3やHomebrewで入れた2系でインストールしようとしたらはまって結局Ruby 1.9.3にしたので、初めから素直に従った方がよさげです。  rvmの導入がうまくできなかったので、それだけこれを参考に。  (OS X::Mountain Lion) RVMでRubyの環境構築メモ   個人的な運用  imathis/octopressからForkしてそのままソース管理として利用  下書きなどあっても人に見られちゃうからBitbucket使うっていう人が多いらしいですが、あまり気にならないのでGitHubで一元管理  setup_github_pages と入力して、GitHub上のこのページ にデプロイされるように  テーマの変更 テーマは、imathis/octopressから選べますが、あまり有名じゃないので、そんなに選択肢無いです。凝るなら自分で作るべきですかね。 こぎれいなテーマを適当に選んで使っています。 導入は簡単で、上記から選んで、下のコマンドですぐ反映されます。
$ cd octopress $ git clone GIT_URL .themes/THEME_NAME $ rake install[&#39;THEME_NAME&#39;] $ rake generate  Markdown 初めて書いた なかなか便利ですね(　´･‿･｀) このあたりよくまとまっててよかったです。
 Markdown記法 チートシート QA@ITで使えるMarkdown記法  </description>
    </item>
    
    <item>
      <title>Google Readerが終わって…</title>
      <link>https://mono0926.com/lifehack/google-reader-feedly/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/lifehack/google-reader-feedly/</guid>
      <description>一日に500-1000件消費するくらいのRSSリーダーヘビーユーザーでしたが、意外と困っていません。
 Google Reader 終わる前  iPhone: Byline + たまにReeder iPad: 同上 Mac: Reeder Web: Google Reader (Windows環境の時など、たまーに見る程度)  Google Reader 終わった後  iPhone: Byline + たまにReeder iPad: Byline (Reeder未対応) Mac: FeedlyのWebアプリ (Reeder未対応) Web: FeedlyのWebアプリ   と、あまり変わって無い上に、FeedlyのWebアプリの操作感(どこを押せば何が出来るかなど)にあまり慣れていないものの、J(次)・K(前)・V(新しいページで記事開く)のショートカットが一緒なことに気づいてからはほぼノンストレスです（´-ω-｀）
ただ、やっぱりMacでReederを使ってサクサク見ていた感じには劣るので、早くReeder for Macがアップデートされてほしいところです（´・ω・｀）
…とは別にこの機会に、SmartNewsで大衆ネタ・ゴシップ系などは拾い読みしているので、RSSリーダーは技術系ネタに絞って整理したいなとかも考えていたり。なかなか面倒ですが（´-ω-｀）
追記 ReadKit というアプリが素晴らしく、常用し始めましたヽ(・ω・｀）</description>
    </item>
    
    <item>
      <title>Octopressへの投稿やdeployをAlfredのWorkflowで</title>
      <link>https://mono0926.com/blog/octopress-alfred/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/blog/octopress-alfred/</guid>
      <description>今日初めてOctopressを触ったら、けっこう気に入ったので、さらに気軽に書ける環境を整えれば捗るのではと思い、AlfredのWorkflowを作ってみました。
# deploy用 OCTOPATH=&#39;/Documents/Git/Private/octopress&#39; cd ~/$OCTOPATH rake gen_deploy git add . git commit -m &amp;quot;deployed via workflow.&amp;quot; git push  # 投稿用 OCTOPATH=&#39;/Documents/Git/Private/octopress&#39; cd ~/$OCTOPATH OCTOPOST=$(rake new_post[$1]| grep -o &#39;source/_posts/.*&#39;) open ~/$OCTOPATH/$OCTOPOST  すんなり出来るかと思いきや、これだけでは動かず、
 In my bash script I had to add some extras because Alfred runs the bash script in a subshell and in this subshell the rvm environment is not available by default. Alfred Workflow for Octopress</description>
    </item>
    
  </channel>
</rss>