<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programmings on mono0926.com</title>
    <link>https://mono0926.com/programming/</link>
    <description>Recent content in Programmings on mono0926.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 01 May 2017 10:13:29 +0900</lastBuildDate>
    
	<atom:link href="https://mono0926.com/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Live Photosを使ってみる</title>
      <link>https://mono0926.com/programming/live-photos/</link>
      <pubDate>Mon, 01 May 2017 10:13:29 +0900</pubDate>
      
      <guid>https://mono0926.com/programming/live-photos/</guid>
      <description>イッヌ🐶</description>
    </item>
    
    <item>
      <title>SourceTreeでブランチ名をコミットメッセージの先頭に自動挿入</title>
      <link>https://mono0926.com/programming/sourcetree/</link>
      <pubDate>Fri, 31 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/sourcetree/</guid>
      <description>Git便利ですね。今やこれ無しで開発は無理、というレベルです。
そんな日々使っているGitですが、何かしらのツールでタスクやIssueを作ってそのIDをfeatureブランチ名としている運用は多いと思います。
その場合、コミットメッセージにそのIDが含まれているとコミットとタスクを紐づけてくれるので、コミットメッセージの先頭にブランチ名を挿入することが多いはずです。
それを打つのが一々面倒だしたまにミスして違うタスクに紐付かれちゃうし、で少し困っていました。
コマンドラインで作業している場合は、以下のようなにGitのprepare-commit-msgフックを利用することで、コミットメッセージ作成時に自動挿入させることが可能です。
 Gitでcommitした時にブランチ名をcommitメッセージに自動でいれる - Qiita  ただ、SourceTreeで試そうとしたら、動いてくれず、調べたところ非対応のようです。
 SourceTree and git prepare-commit-msg - Atlassian Answers  @yabuchin_yさんに相談したら、commit-msgで書き換えてしまえばいけるのでは？ということで作ってもらえました。
(僕はこの時点で、commit-msgはバリデーションフェーズ的なもので、書き換えは不可能なのでは？と思って諦めてしまいそうでした。)
設定手順 コミットメッセージのテンプレートを作成して指定の文章が自動挿入されるようにする 以下を、特定のレポジトリルートで実行。
# $HOME/.gitmessage.txtの置き場所は自由です # グローバルな設定としたい場合は、--globalオプションを付ける git config commit.template $HOME/.gitmessage.txt # .gitmessage.txtの中身(末尾に半角スペースを入れておくこと推奨) [branchname] これで、コミットメッセージ作成時に、[branchname] が先頭に自動挿入されます。
コミット後に[branchname]がブランチ名へ書き換えられるようにする commit-msgフックを利用します。
以下を特定のレポジトリの.git/hooks/commit-msgとして配置します。
#!/usr/bin/env ruby message_file = ARGV[0] message = File.read(message_file, :encoding =&amp;gt; Encoding::UTF_8) current_branch = `git branch | grep &#39;*&#39;`.chomp.sub(&#39;* &#39;, &#39;&#39;) current_branch = current_branch[current_branch.rindex(&amp;quot;/&amp;quot;)+1 .. current_branch.length] newmessage = message.sub(/\[branchname\]/, current_branch) File.</description>
    </item>
    
    <item>
      <title>クックパッド第5回 開発コンテスト24に参戦した話</title>
      <link>https://mono0926.com/programming/cookpad/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/cookpad/</guid>
      <description>先日もISUCONコンテスト予選に出たばかりですが、土日(10月18-19日)に クックパッドの「第5回 開発コンテスト24」に参戦しました。
勝手にアニバーサリー ～なんでもない日を、あの人との記念日に。～が成果物です。 ちなみに、タイトルは僕が初め適当に提案したのが意外と良かったらしくそのまま採用されました（｀・ω・´）
メンバー こんな感じのバランスの良いメンバーが集まりました(　´･‿･｀)
 僕  iOSアプリか適当なGoコード書く予定 (結果Goコード書いてた)   やぶさん  サーバーサイド(普段Scala使ってるけど、今回はGo)   の奥さん  Data Veraciを作った方 (前職の先輩)   ひつじさん  yah○○のデザイナーさん   のんたん☆  恵比寿のデザイナーさん    僕が平均年齢くらいの華やかなメンバーでした。
当日まで  レポジトリ作成: SYM-CONTEST/Cookpad2014 Facebookイベント作成: クックパッド 第5回 開発コンテスト24 Slack用意  自宅警備もする必要があるので、オンライン上でやりとりして開発   yah○○のBASE6で打ち合わせ(ひつじさんからのご招待)  ここでのんたん☆の参戦決定（｀・ω・´）    当日 去年も余命チェッカーで参戦してたので、大体勝手は分かっていました。
朝9時 クックパッドの「第5回 開発コンテスト24」をリロードして、お題が「誰かと話すキッカケを作るサービス」であることを把握。
元々、10時までに作るネタが決まらなかったら解散というオレオレレギュレーションをやっていたので、時間を気にしつつネタ出し。
けっこう良いアイディアが出るものの、コンテスト受けしそうか微妙な感じで、なかなか収束せず。
雰囲気的に10時過ぎてもそのまま続行することにして、最低午前中にという感じで結果、過去に何かつながりがあってご無沙汰な人間関係を、勝手に記念日をでっちあげて祝うことで結びつけるサービスになりました。
具体的には、Twitterで過去に絡んだ人たちに、そのやり取りのキーワードを抽出して○○記念日のメッセージを投げるみたいな。 (Twitterに限らずもっと膨らませたかったけど、実装コストの兼ね合いもあり)
1日目昼 作るものが決まったので、もう少し仕様や画面を詰めるような相談をしたり、出来るところは実装始めたり。</description>
    </item>
    
    <item>
      <title>iOS 8/Swift エンジニア勉強会資料公開しました</title>
      <link>https://mono0926.com/programming/swift-lt/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/swift-lt/</guid>
      <description>iOS 8/Swift エンジニア勉強会が台風で延期になったので、手元にいつまでもあってもしょうもないので資料公開しました(　´･‿･｀)
延期つらたん
↑LINEクリエイターズスタンプとして公開中です。</description>
    </item>
    
    <item>
      <title>iTunesの動画や音楽の再生スピードを変える方法</title>
      <link>https://mono0926.com/programming/quicktime/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/quicktime/</guid>
      <description>iPhoneのPodcastアプリでは再生スピードをコントロール出来て便利なのに、iTunesではその機能が無いので、AppleScriptなど使って出来るようにしてみた。 本当はiTunesに閉じて実現したいところだけど、それはちょっと難しそう。
QuickTime Player 7のインストール 新しめのOSXに標準インストールされているQuickTimeはかっこいいけど機能がしょぼいので、再生スピードを変えるにはQuickTime Player 7をインストールする必要がある。
幸いまだQuickTime Player 7からダウンロード出来る。
 QuickTim 7 は、 Snow Leopard および OS X Lion 上で QTVR、対話型の QuickTime ムービー、MIDI などの古いメディアフォーマットをサポートしています。また、QuickTime Pro の機能を有効にするための QuickTime 7 Pro の登録コードを使用できます。
 とりあえずQucikTime 7をインストールして、「Show A/V Control」(Command + K)で再生スピードなどコントロール出来るウインドウが開くので、機能的にはここまでで完結。
Automatorでアプリ化 上記までだと、一々ファイルをFinderで開いて、QuickTime Player 7で起動するという手順が必要なので、Automatorを使って省力化してみる。
tell application &amp;quot;iTunes&amp;quot; pause --iTunesで選択中・再生中のファイルおよびその再生位置を保持 set my_track to location of selection set my_seconds to player position end tell tell application &amp;quot;QuickTime Player 7&amp;quot; open my_track set my_movie to first document set ts to time scale of my_movie --とりあえず1.</description>
    </item>
    
    <item>
      <title>SwiftでラヴさんWEBアルバムを開くだけのアプリ作った</title>
      <link>https://mono0926.com/programming/swift/</link>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/swift/</guid>
      <description>昼休みに、Swiftで、ラヴさんWEBアルバムを開くだけのアプリ作った。
Swiftもそうだけど、Xcode 6も色々変わってて面白い(　´･‿･｀)</description>
    </item>
    
    <item>
      <title>NodeJS &#43; Express &#43; Stylus &#43; Jade &#43; AngularJS &#43; Redisなどなどで、簡単なTODOアプリ</title>
      <link>https://mono0926.com/programming/todo/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/todo/</guid>
      <description>NodeJS + Express + Stylus + Jade + AngularJS + Redisなどなどで、簡単なTODOアプリ作った。
TypeScriptリファレンス Ver.1.0対応のサンプルを参考に、アレンジした感じ(オリジナルはSQLiteなど使用)。
Redisでのデータの持ち方はケーススタディ — redis 2.0.3 documentationである程度分かったけど、なかなか迷うところや困るところも多いので、Redis入門読んでじっくり勉強中。 TODOアプリでは、なんとか動作自体は出来たけど、ちょっとしっくり来ないところもあったり。
「Redis入門」というタイトルだけど、原書はRedis in Actionなだけあって、けっこう歯ごたえのある内容。一通り理解して手を動かせば、RedisやKVSのパラダイムに慣れられそう。
サーバーサイドは外部モジュール使ってるけど(import xxx = require(&#39;yyy&#39;)形式)、クライアント側は内部モジュール形式で書いて手動で下記を実行して連結しているのも微妙なので、改善したい（´-ω-｀）他はWebStormで普通に実行したり、herokuへのデプロイはGitのPUSHで出来て楽なのだけれど（´-ω-｀）
tsc @compile.tscparams AngularJSとJadeのおかげで、HTML部分がすごくクリーンになっているのはとても良い感じ(　´･‿･｀)</description>
    </item>
    
    <item>
      <title>TypeScript・AngularJS・Jade・Stylusでサンプルコード</title>
      <link>https://mono0926.com/programming/angularjs/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/angularjs/</guid>
      <description>最近Web系の勉強してて、Node.js・Express・Redis・Herokuなどサーバーサイド周り弄ってたけど、そろそろフロントエンドもという感じで色々やってみた。
サンプル置いとく AngularJSはけっこうリッチなライブラリで、全部身につけるのはしばらくかかりそうだけど、今日主要な機能はざっくり書けるようになった感(　´･‿･｀) Vue.jsと迷ったけど、borisyankov/DefinitelyTypedにまだ無かったし、とりあえず今メジャーなAngularJSやっとこうか、という感じ。
JadeとStylusは記法いくつか覚えらればわりとサクサク書けて、気に入った。これ系いくつかあるけど、どれがいいんですかね。あまり比較検討せずに決めてしまった。
 AngularJS: MVW(Model-View-Whatever)フレームワークというらしい。Whatever=厳密に定義しない、みたいな意味らしい。JS・HTML周りのスパゲッティコード解消。MV*とかはともかく、とりあえずバインディング機構あるのが嬉しい。 Jade: HTMLの簡易記法 + αの機能 Stylus: SASS・LESSの後発版みたいな感じ？  資料  AngularJS使い方メモ - Qiita AngularJS - お前のAngular.jsはもうMVCではない。と言われないためのTutorial - Qiita AngularJSのMVWパターンを理解する - Qiita AngularJS: Developer Guide: Conceptual Overview Node.js - Jadeの記法について（あまりまとまっていない） - Qiita Jade Template Syntax Documentation by Example  一気に色々やると破綻しそうかと心配だったけど、意外とスムーズに出来たのは良かった。
AngularJS、AngularJS使い方メモ - Qiitaの「ページの一部に動的にテンプレートを読み込む」くらいまでで、まだシングルページアプリケーション周りの機能は終えてないから、また続きやろう（´-ω-｀）
コード </description>
    </item>
    
    <item>
      <title>golangの環境構築</title>
      <link>https://mono0926.com/programming/golang/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/golang/</guid>
      <description>GoCon/2014spring.rst at master · GoCon/GoConに備えて、とりあえずgolangのセットアップと、暇なときにA Tour of Goをやっておこうかと(　´･‿･｀)
gvmセットアップ moovweb/gvmに書いてある通りにやった。 mercurialのインストールが必要だったので、Brewfileに追記しておいた。
あと、gvm install go1に失敗したので、Issues on OSX · Issue #38 · moovweb/gvmに書いてある対応で何とかなった。
普通にbrew install goのが楽だけど、ちょっとがんばった（´-ω-｀）
実行 以下を実行。
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Printf(&amp;quot;Hello world!&amp;quot;) } OSXの開発環境を整えた - monoHubでJetBrainのIDEいくつかインストールしてたけど、IntelliJ IDEA — The Best Java and Polyglot IDEで全部包含してるのね、情弱つらたん（´-ω-｀）
まあそこそこのお値段だし、適当に色々試用して、良かったら最終的にUltimate Edtion買おうかな（´-ω-｀） Web StormでもGoのプラグインインストール出来たけど、SDKの設定とかうまく出来なかったりぐぐったりして出た説明と違うからCommunity Edition版のIntelliJでやった。
実行できたけど、go build hoge.goで生成されるような実行ファイルが生成出来なくて謎(　´･‿･｀)
GOROOT・GOPATHもどこで設定すべきかとかその役割とかよく分からなくてつらたん（´-ω-｀）
解決  go-lang-idea-plugin/Missing ENV.md at master · go-lang-plugin-org/go-lang-idea-pluginを参考に設定したら、警告ダイアログが出なくなった。 Run Configurationsで、Build before runにチェックを付けてディレクトリをbinに設定したら、実行ファイルも生成されるようになった。  ただ、多分IntelliJがGoのデバッグ実行に対応していない？(無反応)のがつらたん（´-ω-｀） Support for debugging · Issue #25 · go-lang-plugin-org/go-lang-idea-pluginを見ると、GAEプロジェクトのみ対応？？よく分からない（´-ω-｀）</description>
    </item>
    
    <item>
      <title>OSXの開発環境を整えた</title>
      <link>https://mono0926.com/programming/renew/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/renew/</guid>
      <description>Node.jsで色々遊ぼうと思いつつ、開発環境がけっこう汚れていることに気づいたので、整理。 Node.jsのgenerator使いたくて、バージョン0.11系と0.10系をスイッチしたいなとか思ったのが発端。
参考: Node.jsのコールバック地獄をPromiseやGeneratorを使って解消する - HackerNews翻訳してみた
わりとbrew install XXXで雑に各種環境インストールしてたので、これを気に色々直した。
Homebrewアンインストール ゴミが残るのいやだったので、Uninstall Homebrewでhomebrewをアンインストール。
Brewfile導入 以下など見て便利そうだと思っていたので、Brewfile導入。
 Mac OSX をクリーンインストールしてからの環境構築メモ - Shin x blog 「BrewfileでHomebrewパッケージを管理する」をやってみた - sonots:blog MacBook にインストールしているアプリやツールをメモする代わりに Brewfile を作った - present  これだけで一気にインストール出来てとても便利。
brew bundle 僕の：Environment/OSX/Brewfile at master · mono0926/Environment
今後も、Homebrewで何か新しくインストールするときメンテナンスしていくようにしよう。
その他開発環境 brew install XXXで適当にインストールせずに、バージョンの切り替えが容易なようにした。 いくつか種類あったけど、基本後発のを導入してみた。
 Python: yyuu/pyenv Ruby: sstephenson/rbenv Node.js: creationix/nvm  nvmはzshとの相性悪くて日本ではhokaccha/nodebrewがけっこう人気っぽかったけど特に問題無かったのでnvmにした。    諸々雑なところがあるけど、Environment/OSX at master · mono0926/Environmentでセットアップスクリプト管理。
IDE導入 スクリプト系言語は、最近はわりとSublime Textで書いていたけど、やっぱり補完がもう少し聞いてくれないと厳しいので、なるべくIDE使うようにしようと思う。
IDEに慣れるのもそこそこコストだけど、JetBrain系で統一すれば捗るかなと。
今まではNetBeansかたまにEclipseだったけど、乗り換え。少しずつ慣れていこう（´-ω-｀）
 WebStorm :: The smartest JavaScript IDE Ruby on Rails IDE :: JetBrains RubyMine Python IDE &amp;amp; Django IDE for Web developers : JetBrains PyCharm  CE版は無料    </description>
    </item>
    
    <item>
      <title>IRKitで遊び始めた〜とりあえずTerminalで操作〜</title>
      <link>https://mono0926.com/programming/irkit/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/irkit/</guid>
      <description>冬場忙しかったりで既存アプリで部屋のリモコン登録する程度しかいじれてなかったけど、最近ようやく落ち着いてきたので、IRKitで遊んでみる(　´･‿･｀)
セットアップ IRKit - Open Source WiFi Connected Infrared Remote Controllerを参考に、諸々設定。
# dns-sdコマンドで、IRKitのインスタンス名取得。 Pro:b4 mono$ dns-sd -B _irkit._tcp Browsing for _irkit._tcp DATE: ---Mon 05 May 2014--- 14:41:16.669 ...STARTING... Timestamp A/R Flags if Domain Service Type Instance Name 14:41:16.880 Add 2 4 local. _irkit._tcp. iRKitA2C4 # インスタンス名から、IPアドレス取得 Pro:b4 mono$ dns-sd -G v4 irkita2c4.local DATE: ---Mon 05 May 2014--- 14:41:43.565 ...STARTING... Timestamp A/R Flags if Hostname Address TTL 14:41:43.566 Add 2 4 irkita2c4.</description>
    </item>
    
    <item>
      <title>IRKitに外からアクセス出来るようにした</title>
      <link>https://mono0926.com/programming/irkit-remote/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/irkit-remote/</guid>
      <description>前回のIRKitで遊び始めた〜とりあえずTerminalで操作〜 - monoHubの続き。
前回触ったIRKit Device HTTP APIは同じWiFi内から操作するためのもので、外からアクセスするときはIRKit Internet HTTP APIを叩くことになる。
IRKit Internet HTTP APIを叩けるように準備 まずは、clienttokenを取得。
Pro:~ mono$ curl -i &amp;quot;http://192.168.0.4/keys&amp;quot; -d &#39;&#39; HTTP/1.0 200 OK Access-Control-Allow-Origin: * Server: IRKit/1.3.5.0.gce6ac15 Content-Type: text/plain {&amp;quot;clienttoken&amp;quot;:&amp;quot;**************************&amp;quot;} #伏せています 取得したclienttokenを元に、deviceidとclientkeyを取得。
Pro:~ mono$ curl -i -d &amp;quot;clienttoken=**************************&amp;quot; &amp;quot;https://api.getirkit.com/1/keys&amp;quot; HTTP/1.1 200 OK Server: ngx_openresty Date: Mon, 05 May 2014 06:44:32 GMT Content-Type: application/json; charset=utf-8 Content-Length: 94 Connection: keep-alive Access-Control-Allow-Origin: * Access-Control-Allow-Headers: X-Requested-With X-Content-Type-Options: nosniff {&amp;quot;deviceid&amp;quot;:&amp;quot;XXXXXXXXXXXXXXXXXXXXXX&amp;quot;,&amp;quot;clientkey&amp;quot;:&amp;quot;YYYYYYYYYYYYYYYYYYYYY&amp;quot;} #伏せています Internet HTTP APIを使ってみる deviceid・clientkey・家のライトのオンオフ信号をhttps://api.</description>
    </item>
    
    <item>
      <title>Node.jsのIRKitライブラリあったから試してみた</title>
      <link>https://mono0926.com/programming/irkit-nodejs/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/irkit-nodejs/</guid>
      <description>せっかくNode.js the Right Way: Practical, Server-Side JavaScript That Scales [Kindle Edition]でNode.jsを勉強したので、IRKitをNode.jsの勉強題材に出来ないかなと思って、とりあえずNode.jsのクライアントライブラリ無いかな？と探したらあったので、叩いてみた。
dameleon/node-irkit 元々IRKitのAPIがシンプルなので、あまりNode.jsを使う必然性感じないけど、まあ勉強に（´-ω-｀）
本1冊やったとはいえ、色々まだ不慣れなので、コード読解にも良いかも。 ドキュメントは無いものの、テストはちゃんと書かれていたので、それを参考に使ってみた。
まずはインストール。
npm install node-irkit とりあえずlocalApiを使ってみた。 実行する度に、部屋の電気がオンオフされて煩わしいので、テストは違う信号でやろうと思ったなう（´-ω-｀）
const irkit = require(&#39;node-irkit&#39;), localApi = irkit.getLocalApi(&amp;quot;http://192.168.0.4&amp;quot;), myRoomLight = &#39;{&amp;quot;format&amp;quot;:&amp;quot;raw&amp;quot;,&amp;quot;freq&amp;quot;:38,&amp;quot;data&amp;quot;:[17421,9061,1037,1232,935,3458,935,1190,1073,1190,1073,1190,1190,1190,1073,1190,935,3458,1037,3341,1037,1190,935,3458,1002,3458,1002,1111,1111,3341,968,3458,968,1150,1150,3458,1037,3341,1037,1275,1002,3458,1002,1190,1037,3341,1037,1150,1150,3341,1037,1190,935,1275,935,3458,1037,1190,1002,3458,1037,1232,935,3458,1111,1111,1111]}&#39;, myRoomLightMessage = JSON.parse(myRoomLight); localApi.postMessages(myRoomLightMessage, function(err, res) { console.log(res); //空 }); </description>
    </item>
    
    <item>
      <title>Haskell勉強中</title>
      <link>https://mono0926.com/programming/haskell/</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/haskell/</guid>
      <description>2週間くらい前からHaskell勉強中。
各種言語使ってきて、今の本業(Objective-C)や一番得意な言語(C#)以外にも久々に手を出したいなと思って以下を検討。
 LL系(Pythonなど)をもう少し自由に使えるように  ベターな書き方やモジュール知らずに冗長な記述になっていそう 日頃の自動化が捗りそう   ネイティブ系  C言語が最低限しか書けない上に段々忘れていったりもしている ネイティブ系(コンパイル型・非VM)で書かなきゃいけない時とか手駒がない とはいいつつCもC++も積極的に書きたくないのでやるとしたら下記のいずれか  Go D言語     関数型  C#でLINQとかラムダ式とか慣れたけど、関数型の書き方を一部取り入れたオブジェクト指向という感じで、純粋関数型言語を学びたい pandocというドキュメント変換ツールのソース理解とか改変とかしたいと思いつつHaskellで書かれていて全然分からない    まあどれでも良いかなあと思いつつ、Scalaとかも勉強したいとか思っていたのもあり関数型かなあと、とりあえずKindleで安く手に入るGuide to ScalaーScalaプログラミング入門をざっと読んだ。 結果、C#と大して変わらず(Scalaの方がより関数型っぽいけど)、ちゃんと勉強するなら純粋関数型言語だなあと思い、pandocの理解にも繋がるしHaskellを勉強することに。
コンパイル型といえども、記述もシンプルでコンパイル簡単なので、今Pythonとかで簡単な自動化スクリプト書いている代替にもなるかなと。
勉強計画 すごいHaskellたのしく学ぼう! 少し前に話題になっていたこの本をまず読むことに。 洋書にするか迷ったけど、せっかく和書のKindle版もあるのでそれに頼った。
そして、オンライン版はフリーで読めることもさっき知ったり：Learn You a Haskell for Great Good!
フリーということは…と思って探したら、Kindle用のファイルを生成出来るプロジェクトもあったり。 ただ、本に出てくるソースコード集が見つからず、まあいいか。
本の前半は、Haskellの構文に慣れるのに少し苦労しつつ、後半のアプリカティブのあたりでけっこう理解が怪しくなってきた（´-ω-｀） 理論が理解出来ていなくてしっくりこないところが一部あるものの、コードの挙動などは何とか読み解けているのでまだなんとかいけるはず。
その後 Parallel and Concurrent Programming in Haskellが面白そうなので、次に読みたいところ。並列/並行処理周りがまだ弱い気がするのでその勉強もかねて。
あと、個人的に同じ本を繰り返し読むのが苦手(それが大事なのは理解している)なので、代わりに本物のプログラマはHaskellを使うとか読んで曖昧なところの理解を深めて行ければ。
実行環境 GHCインストール 色々処理系があるようだけど、標準のGHCを導入。 よく分からないけど、Homebrewで良いかと、以下を実行してインストール。 Mavericksなどの場合は環境によっては前もってCommand Line Toolsのインストールをしないとビルド失敗したりするはず。
brew update brew install haskell brew install haskell-platform # これがなんだか理解していない これで、ターミナルでghciと打つと、Haskellのインタプリターが起動するはず。 今まで、わざわざファイルで書く必要の無い書き捨ての込み入った計算はPythonのインタプリターでやっていた(そこまでする必要の無い程度ならAlfredの電卓で)けど、これからはghciでやろうかなと。</description>
    </item>
    
    <item>
      <title>iOS7対応記事のまとめ</title>
      <link>https://mono0926.com/programming/ios7/</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/ios7/</guid>
      <description>iOS7関連のNDA解禁ということで、色々記事が増えてきたので、メモ。 少しずつ追記していきながら、落ち着いたところで、集約したような記事書くかも。
 iOS 7対応事例 FastCheckin iOS6からiOS7への対応 iOS 7向けアプリ開発時の注意点 iOS7でNavigationBarに入れたSearchBarにキャンセルボタンを出現させる方法 iOS6 -&amp;gt; iOS7変更対応 iOS 6/7 で UILabel などの見た目がずれるよ〜とお嘆きのあなたへ CocoapodsとXcode5の組み合わせでエラー出た+解決した iOS7でステータスバーが被る問題への対応 iOS7のarm64対応でやったこと iOS7でナビゲーションバーやステータスバーの文字色を変える iOS 7 でステータスバーを隠す方法  </description>
    </item>
    
    <item>
      <title>GingerをAlfredで使えるようにしてみた</title>
      <link>https://mono0926.com/programming/ginger/</link>
      <pubDate>Sun, 04 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/ginger/</guid>
      <description>Ginger APIをPythonで叩いてみたの続き。
元々はAlfredで英文校正が出来るようにしたかったので、ここからが本番。
完成版 こんなのが出来たという紹介から。
校正 ginger というキーワードに続けて英文を打つと、正してくれる。(この場合、冠詞aの抜けが正される。)
改善候補一覧 rephraseというキーワードに続けて適当な英文を打つと、より自然な言い回し候補を出してくれる。 &amp;ldquo;Thank you for your reply&amp;quot;は、メールの返信とかでよく使うけど、ワンパターン化を避けたい時とかに使えそう。
ともに、選択状態でエンターを押すと、クリップボードにコピーされて、フォーカスの当たっているアプリにペーストされるので、適当にメールとかエディタとか使いながら自然と正しそうな英文が打てるようになるはず。
AlfredのWorkflowの作り方 一応ドキュメントはあるけど、肝心なところが書かれていなかったりして、フォーラムで聞いたり、既存のWorkflowのソースを読んで作り方を学ばなければいけない感じ。 作り方自体は基本簡単だけど、ちょくちょくはまりどころがあって苦労する。
キーワードの受け取り {query}というキーワードでアクセス出来るので、それをスクリプトに引数ととして渡すのが一般的。
結果の表示 処理終了時にnotification飛ばしたり、クリップボードにコピーとかはWorkflowのエディタでパーツをつなぎ合わせたりするだけで簡単だけど、上の例みたいに一覧するのはどうやるのかと思っていたら、XMLで標準出力するらしい。 関係ないechoやprint文があると壊れるので注意。 ここらへんも、既存のソース読み解いてやっと分かった。それも不慣れなPHPソースがけっこう多くてアレ。
こんな感じのXMLを標準出力すると、Itemの数だけ一覧される。
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt; &amp;lt;items&amp;gt; &amp;lt;item arg=&amp;quot;I am a programmer and writing bad English. I am Japanese.&amp;quot; uid=&amp;quot;d78b56b0-fcb7-11e2-9787-e80688cb3920&amp;quot;&amp;gt; &amp;lt;title&amp;gt;I am a programmer and writing bad English. I am Japanese.&amp;lt;/title&amp;gt; &amp;lt;subtitle&amp;gt;Gingered sentence&amp;lt;/subtitle&amp;gt; &amp;lt;icon/&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;/items&amp;gt; これも適当に文字列置換したりして作れるけど、PythonでXML組み立てて作る簡単なモジュール作って再利用できるようにしておいた。 ここらへんの下回りがけっこうこなれていない感。
インストール可能なパッケージの作り方 配布されているworkflowは、*.alfredworkflowという形式で、ダブルクリックでインストールできる。
簡単なやり方は自分のworkflowを右クリックしてExportすること。
逆にscript群からコマンドで作りたい場合は、必要なファイルをzip化して拡張子を変えればよい。 info.plistが必要で、それは多分コマンドラインじゃ作れないから、やっぱり最初はExportの過程が必要だけど、コードとか別管理したいならコマンドラインで修正版作るのがよさげな気がする。
適当にpackage作成スクリプト書いた。
cp ginger/info.plist . cp ginger/*.</description>
    </item>
    
    <item>
      <title>iOSからDropbox Sync APIを使ってみる</title>
      <link>https://mono0926.com/programming/dropbox/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mono0926.com/programming/dropbox/</guid>
      <description>Dropbox Sync APIとは サンプルとドキュメント  サンプル  Datastore API SDKsからSDKダウンロードすると同梱されてる   ドキュメント  Datastore API for iOS Documentation   チュートリアル  Using the Sync API on iOS    サンプル起動 Files Examplesのサンプル </description>
    </item>
    
  </channel>
</rss>