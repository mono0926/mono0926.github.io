<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dropbox | monoHub]]></title>
  <link href="http://mono0926.github.io/blog/categories/dropbox/atom.xml" rel="self"/>
  <link href="http://mono0926.github.io/"/>
  <updated>2013-07-17T22:45:00+09:00</updated>
  <id>http://mono0926.github.io/</id>
  <author>
    <name><![CDATA[Masayuki Ono]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOSからDropbox新APIのDrop-ins(Chooser)を使ってみる]]></title>
    <link href="http://mono0926.github.io/blog/2013/07/17/dropbox/"/>
    <updated>2013-07-17T12:51:00+09:00</updated>
    <id>http://mono0926.github.io/blog/2013/07/17/dropbox</id>
    <content type="html"><![CDATA[<p>古い記事だけど、<a href="http://blog.syuhari.jp/archives/2284">[iPhone/iPad] Dropbox API を使ってみた</a> をさらっと見て作業開始。<br/>
開発者登録は自力じゃなかなか見つからなかったけど、<a href="https://www.dropbox.com/developers/apply?cont=/developers/apps">Dropbox API terms and conditions</a>。<br/>
権限の設定などは初回の作成時以外は変更出来ないっぽいので、慎重に。</p>

<h3>Drop-ins</h3>

<p><a href="https://www.dropbox.com/developers/dropins/chooser/ios">Using the Chooser (iOS)</a>を読んでみた。<br/>
<a href="http://dl.dropboxusercontent.com/s/uf3893wfnk4f3p9/dropbox-ios-chooser-sdk-1.0.zip">Download iOS SDK</a>に同梱のサンプルプロジェクトを実行しながらドキュメント読めばすごく分かりやすい。</p>

<h4>導入</h4>

<p><a href="http://dl.dropboxusercontent.com/s/uf3893wfnk4f3p9/dropbox-ios-chooser-sdk-1.0.zip">Download iOS SDK</a> に入っているDBChooser.framework と DBChooser.bundle を対象のプロジェクトに突っ込むだけ。</p>

<!-- more -->


<h4>AppKey指定</h4>

<p>唯一躓きそうなのがAppKeyで、サンプルには元々おそらくサンプル用のkeyがURL Schemesに入っていてそのまま実行できちゃうけど、自分のアプリに適用する場合はちゃんと自分のkeyを指定する必要あり。
プロジェクトのセッティングのTARGETSのURL TypesのURL Schemesに指定するわけだけど、db-というプレフィックスの後に<a href="https://www.dropbox.com/developers/apps">App Console</a>のDrop-insタイプのアプリのkeyを入れる形式。不正なAppKeyを指定するとChooser起動のタイミングで落ちる。</p>

<p><img src="/images/post/dropin.png" alt="projetc setting" /></p>

<h4>呼び出し</h4>

<p>```objective-c</p>

<h1>import &lt;DBChooser/DBChooser.h></h1>

<ul>
<li><p>(void)didPressChoose
{
  // 複数のkeyを使う場合はdefaultChooserの代わりにkeyを指定して初期化
  [[DBChooser defaultChooser] openChooserForLinkType:DBChooserLinkTypePreview // 取得出来るURL2種類から選択
                                  fromViewController:self completion:^(NSArray *results)
  {
      if ([results count]) {
          // Process results from Chooser
      } else {
          // User canceled the action
      }
  }];
}
```</p></li>
<li><p>取得出来るURL2種類</p>

<ul>
<li>DBChooserLinkTypePreviewlinks

<ul>
<li>文字通りプレビュー。色々アクションを選べる。</li>
</ul>
</li>
<li>DBChooserLinkTypeDirectlinks

<ul>
<li>データに直接アクセス出来るリンク</li>
<li>サーバーにこれを渡す作りにすれば、モバイル端末 &ndash; サーバー通信はちょっとしたJSONで、通信環境の良いサーバーで効率よくダウンロードとかできそう。</li>
<li>4時間でexpireされるので注意</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>Chooserからファイルを選んだあと</h4>

<h5>AppDelegateの以下が呼ばれる</h5>

<p>```objective-c
&ndash; (BOOL)application:(UIApplication <em>)application openURL:(NSURL </em>)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{</p>

<pre><code>// urlに色々詰め込まれている
// 複数のkeyを使う場合はdefaultChooserの代わりにkeyを指定して初期化
if ([[DBChooser defaultChooser] handleOpenURL:url]) {
    return YES;
}
return NO;
</code></pre>

<p>}
```</p>

<h5>urlがパースされて以下のDBChooserResultのarrayにマッピングされるイメージ</h5>

<p>```objective-c
@interface DBChooserResult : NSObject
// DBChooserLinkTypeで何が入るか変わる。
@property NSURL <em>link;
@property NSString </em>name;
@property long long size;
@property NSURL <em>iconURL;
// 画像や動画の時に3種類(64x64px・200x200px・640x480px)の大きさのサムネイルURLが入っている。
@property NSDictionary </em>thumbnails;</p>

<p>@end
```</p>

<h3>まとめ</h3>

<p>サンプルも分かりやすくて、APIとしても使いやすくて素晴らしい。
このAPIに限らずだけど、Dropboxアプリがインストールされていること前提のアプリと割り切れば色々広がりそう。
<a href="https://www.dropbox.com/developers/dropins">Drop-ins</a> にある通りまだ開発中みたいだけど、ChooserだけでなくSaverもあって、アプリ間連携とかもこれで行けたりするかも。(iOSやAndroidはローカルDropboxアプリへの保存は同期的に行いそうだし)</p>
]]></content>
  </entry>
  
</feed>
