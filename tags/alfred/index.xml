<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alfred on mono-log</title>
    <link>http://mono0926.com/tags/alfred/</link>
    <description>Recent content in Alfred on mono-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 04 Aug 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://mono0926.com/tags/alfred/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GingerをAlfredで使えるようにしてみた</title>
      <link>http://mono0926.com/blog/2013/08/04/ginger/</link>
      <pubDate>Sun, 04 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mono0926.com/blog/2013/08/04/ginger/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://mono0926.com/blog/2013/08/03/ginger/&#34;&gt;Ginger APIをPythonで叩いてみた&lt;/a&gt;の続き。&lt;/p&gt;

&lt;p&gt;元々はAlfredで英文校正が出来るようにしたかったので、ここからが本番。&lt;/p&gt;

&lt;h3 id=&#34;完成版:6982ba537ea9b38026c6dcf8fa9c1024&#34;&gt;完成版&lt;/h3&gt;

&lt;p&gt;こんなのが出来たという紹介から。&lt;/p&gt;

&lt;h4 id=&#34;校正:6982ba537ea9b38026c6dcf8fa9c1024&#34;&gt;校正&lt;/h4&gt;

&lt;p&gt;ginger というキーワードに続けて英文を打つと、正してくれる。(この場合、冠詞aの抜けが正される。)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mono0926.com/images/post/ginger1.png&#34; alt=&#34;ginger&#34; /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;改善候補一覧:6982ba537ea9b38026c6dcf8fa9c1024&#34;&gt;改善候補一覧&lt;/h4&gt;

&lt;!-- more --&gt;

&lt;p&gt;rephraseというキーワードに続けて適当な英文を打つと、より自然な言い回し候補を出してくれる。
&amp;ldquo;Thank you for your reply&amp;rdquo;は、メールの返信とかでよく使うけど、ワンパターン化を避けたい時とかに使えそう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mono0926.com/images/post/ginger2.png&#34; alt=&#34;ginger&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ともに、選択状態でエンターを押すと、クリップボードにコピーされて、フォーカスの当たっているアプリにペーストされるので、適当にメールとかエディタとか使いながら自然と正しそうな英文が打てるようになるはず。&lt;/p&gt;

&lt;h3 id=&#34;alfredのworkflowの作り方:6982ba537ea9b38026c6dcf8fa9c1024&#34;&gt;AlfredのWorkflowの作り方&lt;/h3&gt;

&lt;p&gt;一応&lt;a href=&#34;http://support.alfredapp.com/workflows&#34;&gt;ドキュメント&lt;/a&gt;はあるけど、肝心なところが書かれていなかったりして、&lt;a href=&#34;http://www.alfredforum.com/forum/3-share-your-workflows/&#34;&gt;フォーラム&lt;/a&gt;で聞いたり、既存のWorkflowのソースを読んで作り方を学ばなければいけない感じ。
作り方自体は基本簡単だけど、ちょくちょくはまりどころがあって苦労する。&lt;/p&gt;

&lt;h4 id=&#34;キーワードの受け取り:6982ba537ea9b38026c6dcf8fa9c1024&#34;&gt;キーワードの受け取り&lt;/h4&gt;

&lt;p&gt;{query}というキーワードでアクセス出来るので、それをスクリプトに引数ととして渡すのが一般的。&lt;/p&gt;

&lt;h4 id=&#34;結果の表示:6982ba537ea9b38026c6dcf8fa9c1024&#34;&gt;結果の表示&lt;/h4&gt;

&lt;p&gt;処理終了時にnotification飛ばしたり、クリップボードにコピーとかはWorkflowのエディタでパーツをつなぎ合わせたりするだけで簡単だけど、上の例みたいに一覧するのはどうやるのかと思っていたら、XMLで標準出力するらしい。
関係ないechoやprint文があると壊れるので注意。
ここらへんも、既存のソース読み解いてやっと分かった。それも不慣れなPHPソースがけっこう多くてアレ。&lt;/p&gt;

&lt;p&gt;こんな感じのXMLを標準出力すると、Itemの数だけ一覧される。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;
&amp;lt;items&amp;gt;
  &amp;lt;item arg=&amp;quot;I am a programmer and writing bad English. I am Japanese.&amp;quot; uid=&amp;quot;d78b56b0-fcb7-11e2-9787-e80688cb3920&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;I am a programmer and writing bad English. I am Japanese.&amp;lt;/title&amp;gt;
    &amp;lt;subtitle&amp;gt;Gingered sentence&amp;lt;/subtitle&amp;gt;
    &amp;lt;icon/&amp;gt;
  &amp;lt;/item&amp;gt;
&amp;lt;/items&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これも適当に文字列置換したりして作れるけど、PythonでXML組み立てて作る簡単なモジュール作って再利用できるようにしておいた。
ここらへんの下回りがけっこうこなれていない感。&lt;/p&gt;

&lt;h4 id=&#34;インストール可能なパッケージの作り方:6982ba537ea9b38026c6dcf8fa9c1024&#34;&gt;インストール可能なパッケージの作り方&lt;/h4&gt;

&lt;p&gt;配布されているworkflowは、*.alfredworkflowという形式で、ダブルクリックでインストールできる。&lt;/p&gt;

&lt;p&gt;簡単なやり方は自分のworkflowを右クリックしてExportすること。&lt;/p&gt;

&lt;p&gt;逆にscript群からコマンドで作りたい場合は、必要なファイルをzip化して拡張子を変えればよい。
info.plistが必要で、それは多分コマンドラインじゃ作れないから、やっぱり最初はExportの過程が必要だけど、コードとか別管理したいならコマンドラインで修正版作るのがよさげな気がする。&lt;/p&gt;

&lt;p&gt;適当にpackage作成スクリプト書いた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp ginger/info.plist .
cp ginger/*.png .
zip ginger.zip ginger_driver.py ginger/*.py info.plist *.png workflow/*.py
rm info.plist *.png
mv ginger.zip ginger.alfredworkflow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな管理で良いのか若干謎。&lt;/p&gt;

&lt;p&gt;以上、&lt;a href=&#34;https://github.com/mono0926/AlfredWorkflow&#34;&gt;GitHub&lt;/a&gt;で管理するようにした。
今までworkflowの作り方がよく分からない部分があったり管理が適当だったりしたけど、これからはもっとサクサク作れそう。&lt;/p&gt;

&lt;p&gt;今回の成果物：&lt;a href=&#34;https://github.com/mono0926/AlfredWorkflow/raw/master/ginger.alfredworkflow&#34;&gt;Ginger Workflow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Octopressへの投稿やdeployをAlfredのWorkflowで</title>
      <link>http://mono0926.com/blog/2013/07/07/octopress-alfred/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mono0926.com/blog/2013/07/07/octopress-alfred/</guid>
      <description>

&lt;p&gt;今日初めてOctopressを触ったら、けっこう気に入ったので、さらに気軽に書ける環境を整えれば捗るのではと思い、AlfredのWorkflowを作ってみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# deploy用
OCTOPATH=&#39;/Documents/Git/Private/octopress&#39;
cd ~/$OCTOPATH
rake gen_deploy
git add .
git commit -m &amp;quot;deployed via workflow.&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# 投稿用
OCTOPATH=&#39;/Documents/Git/Private/octopress&#39;
cd ~/$OCTOPATH
OCTOPOST=$(rake new_post[$1]| grep -o &#39;source/_posts/.*&#39;)
open ~/$OCTOPATH/$OCTOPOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すんなり出来るかと思いきや、これだけでは動かず、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In my bash script I had to add some extras because Alfred runs the bash script in a subshell and in this subshell the rvm environment is not available by default.
&lt;a href=&#34;http://tooh.github.io/blog/2013/04/23/Alfred_workflow_for_Octopress/&#34;&gt;Alfred Workflow for Octopress&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とある通り、下記のような設定をする必要があったようです。
かなりハマりました（´-ω-｀）
よく分からないけど、別ファイルにしたら動かないので、とりあえず全て冒頭にこれを挟みました（´-ω-｀）&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;&lt;code&gt;# rv設定
if [[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] ; then
	source &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに一応previewコマンドも作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if [[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] ; then
	source &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;
fi
OCTOPATH=&#39;/Documents/Git/Private/octopress&#39;

cd ~/$OCTOPATH
rake generate
# open in a browser
open http://localhost:4000/
rake preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらはコマンドを実行するだけではウインドウが開かれずプロセスがゾンビ状態になってしまうので、Alfredで呼び出す時に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open -a Terminal.app preview.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と少しだけ工夫。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Temikus/alfred-octopress/blob/master/post.sh&#34;&gt;Temikus/alfred-octopress&lt;/a&gt; など、同じようなもの作っている人もいたり。&lt;/p&gt;

&lt;p&gt;とりあえず、これでいつでもランチャー起動して&lt;code&gt;post titleなど&lt;/code&gt;と入力すると、記事が生成されて開かれて、書き終わったら&lt;code&gt;preview&lt;/code&gt;で確認して、&lt;code&gt;deploy&lt;/code&gt;実行すればサイトへの反映とレポジトリへのPushが行われる便利な環境が出来ました。
(Alfredのテーマもかっこよくして遊んでました。)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mono0926.com/images/post/post.png&#34; alt=&#34;post workflow&#34; /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;octopress気に入ったけど:641b1723ac00cebbf1ffb348bd5d5d56&#34;&gt;Octopress気に入ったけど…&lt;/h4&gt;

&lt;p&gt;Qiitaもよく見たらMarkdownでかなり使いやすそう。
色々ツールもあるし。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kobito.qiita.com/&#34;&gt;Kobito&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Qiitaに投稿出来るクライアントアプリ。同時にGistにスニペット登録も可能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gistboxapp.com/&#34;&gt;GistBox&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Gist用Webアプリ。Chrome App版はネイティブっぽい操作感。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近久しく何も書いてなかったけど、あまり脈絡の無い雑多メモなどはこちらで、技術系TipsはQiitaあたりにまとめる習慣付けたい（´・ω・｀）&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>